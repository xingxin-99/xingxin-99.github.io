{"meta":{"title":"Star","subtitle":null,"description":"一闪一闪亮晶晶，漫天都是小星星~","author":"Star","url":"https://xingxin-99.github.io"},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"about/index.html","permalink":"https://xingxin-99.github.io/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"bangumi/index.html","permalink":"https://xingxin-99.github.io/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"Ca","date":"2018-12-12T14:14:16.000Z","updated":"2023-08-25T05:38:52.619Z","comments":true,"path":"categories/index.html","permalink":"https://xingxin-99.github.io/categories/index.html","excerpt":"","text":""},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"client/index.html","permalink":"https://xingxin-99.github.io/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"comment/index.html","permalink":"https://xingxin-99.github.io/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"donate/index.html","permalink":"https://xingxin-99.github.io/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"lab/index.html","permalink":"https://xingxin-99.github.io/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"links/index.html","permalink":"https://xingxin-99.github.io/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"music/index.html","permalink":"https://xingxin-99.github.io/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"rss/index.html","permalink":"https://xingxin-99.github.io/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"tags/index.html","permalink":"https://xingxin-99.github.io/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"https://xingxin-99.github.io/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"video/index.html","permalink":"https://xingxin-99.github.io/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"Mybatis","slug":"Mybatis","date":"2023-08-25T08:18:45.000Z","updated":"2023-08-25T08:25:18.986Z","comments":true,"path":"2023/08/25/Mybatis/","link":"","permalink":"https://xingxin-99.github.io/2023/08/25/Mybatis/","excerpt":"","text":"一、Mybatis概述 二、Mybatis入门程序maven中为什么放在resource目录下的资源，等于放在类的根路径下在 Maven 项目中，src/main/resources 目录下的资源文件会被打包进生成的 Jar 或 War 包中，并放在类路径的根目录下。这是因为 Maven 在构建项目时会把 src/main/resources 目录作为类路径的一部分，所以所有放在这个目录下的文件都会被打包进去。在 Java 项目中，类路径指的是 JVM 用来搜索类和资源文件的路径。类路径的根目录是指能够直接被 JVM 搜索到的目录，这个目录下的文件都可以直接用 ClassLoader 加载。在 Maven 项目中，src/main/resources 目录中的文件就是放在这个根目录下的。因此，如果我们把某个资源文件放在 src/main/resources 目录下，它就相当于放在了类路径的根目录下，可以直接通过 ClassLoader 加载，无需指定路径。这也是 Maven 中推荐的一种资源文件的组织方式，方便我们在项目中访问和使用这些文件。 public class mybatisTest { public static void main(String[] args) { SqlSession sqlSession=null; try { SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder(); InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;); SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is); sqlSession =sqlSessionFactory.openSession(); int count = sqlSession.insert(&quot;car_insert&quot;); System.out.println(count); sqlSession.commit(); } catch (IOException e) { if(sqlSession!=null){ sqlSession.rollback(); } throw new RuntimeException(e); }finally { if(sqlSession!=null){ sqlSession.close(); } } } } Junit介绍 public class MathService{ public int sum(int a, int b){ return a+b; } } public class MathServiceTest{ MathService mathService = new MathService(); @Test public void Testsum(){ int actual = mathService.sum(1,2); int expected = 3; Assert.assertEquals(expected,actual); } } 日志框架 &lt;settings&gt; &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt; &lt;/settings&gt; Mybatis工具类 public class mybatisUtil { private mybatisUtil(){ } private static SqlSessionFactory sqlSessionFactory; static { try { SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder(); sqlSessionFactory = sqlSessionFactoryBuilder.build(Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;)); } catch (IOException e) { throw new RuntimeException(e); } } public static SqlSession openSession(){ return sqlSessionFactory.openSession(); } } 三、使用Mybatis完成CRUD &lt;mapper namespace=&quot;com.star.mybatis&quot;&gt; &lt;insert id=&quot;car_insert&quot;&gt; insert into t_car(id,car_num,brand,guide_price,produce_time,car_type) values (null,#{carNum},#{brand},#{guidePrice},#{produceTime},#{carType}) &lt;/insert&gt; &lt;delete id=&quot;car_delete&quot;&gt; delete from t_car where id=#{i} &lt;/delete&gt; &lt;select id=&quot;car_select&quot; resultType=&quot;com.star.mybatis.introduction.pojo.Car&quot;&gt; select * from t_car where id=#{id} &lt;/select&gt; &lt;select id=&quot;car_selectall&quot; resultType=&quot;com.star.mybatis.introduction.pojo.Car&quot;&gt; select * from t_car &lt;/select&gt; &lt;/mapper&gt; public class mybatisTest { @Test public void deletetest(){ SqlSession sqlSession = mybatisUtil.openSession(); int count = sqlSession.delete(&quot;car_delete&quot;,6); System.out.println(count); sqlSession.commit(); sqlSession.close(); } @Test public void testInsert(){ Car car = new Car(null,&quot;001&quot;,&quot;长安&quot;,325.00,&quot;2023-04-03&quot;,&quot;燃油&quot;); SqlSession sqlSession = mybatisUtil.openSession(); int count = sqlSession.insert(&quot;car_insert&quot;,car); System.out.println(count); sqlSession.commit(); sqlSession.close(); } @Test public void testSelect(){ SqlSession sqlSession = mybatisUtil.openSession(); Car car = sqlSession.selectOne(&quot;car_select&quot;,8); System.out.println(car); } @Test public void testSelectAll(){ SqlSession sqlSession = mybatisUtil.openSession(); List&lt;Car&gt; cars = sqlSession.selectList(&quot;car_selectall&quot;); cars.forEach(car -&gt; System.out.println(car)); } } 四、Mybatis核心配置文件详解 五、在WEB中应用Mybatis方法作用域方法作用域是指变量、常量和对象在方法中的可见性和生命周期。在方法内部声明的变量和常量只在方法内部可见，当方法执行结束时，它们也随之消失。对象的作用域可以超出方法，例如一个方法返回一个对象，这个对象在方法外部也可以被使用，直到它被垃圾回收器回收。方法作用域的一个重要特点是，方法内部的变量名或参数名可以与类的成员变量名或参数名相同，但是方法内部的变量或参数会覆盖类的成员变量或参数，直到方法执行结束。应用作用域应用作用域是指对象的生命周期与应用程序的生命周期相同，即在应用程序启动时创建，在应用程序关闭时销毁。在Spring框架中，应用作用域的对象通常使用单例模式创建。在应用作用域下创建的对象可以在整个应用程序中共享，因此在多个地方使用同一个对象可以提高程序的性能。例如，在Web应用程序中，可以在应用作用域下创建一个共享的数据源对象，以便多个线程共享这个对象，避免了频繁创建和销毁数据源对象的开销。请求作用域请求作用域是指在一次 HTTP 请求的处理过程中所创建的对象的作用域。它的生命周期是从请求的开始到响应的结束。在一个 HTTP 请求中，通过 HttpServletRequest 对象可以获取请求作用域，可以将对象存放在请求作用域中，然后在整个请求处理过程中共享这些对象。通常情况下，请求作用域可以用于在不同的页面之间传递数据。为什么SqlSessionFactory的作用域为应用作用域MyBatis中的SqlSessionFactory是一个重量级的对象，主要负责创建和管理SqlSession，其创建过程包含了加载配置文件、解析映射文件、创建数据库连接等操作，因此在创建SqlSessionFactory对象时会耗费较多的资源和时间。而且，一个SqlSessionFactory对象一般情况下只需要创建一次，并在应用生命周期内持续使用，因此将其作用域设置为应用作用域是比较合适的。如果将SqlSessionFactory的作用域设置为方法或请求作用域，那么每次执行操作都需要重新创建和销毁SqlSessionFactory对象，会导致不必要的资源浪费和性能下降。而将其作用域设置为会话作用域也不太合适，因为SqlSessionFactory是线程安全的，多个线程可以共享同一个SqlSessionFactory对象，因此在会话作用域中可能会造成不必要的资源浪费和线程安全问题。为什么SqlSession的作用域为请求作用域在使用 MyBatis 进行数据库操作时，每个 SqlSession 都代表了一次对数据库的操作会话。通常情况下，一个请求需要操作数据库多次，因此需要多次创建 SqlSession 对象。由于 SqlSession 是非线程安全的，每次创建一个 SqlSession 对象实例既需要时间又占用内存，所以为了更好地控制资源的开销，将 SqlSession 的作用域设置为请求作用域是比较合适的选择。将 SqlSession 的作用域设置为请求作用域可以保证每个请求都能获取到一个独立的 SqlSession 实例，避免了线程安全问题和并发访问的冲突。同时，由于每个 SqlSession 对象实例只存在于请求过程中，不会长时间占用内存，能够有效地避免内存泄露的问题，提升了应用程序的稳定性和性能。 六、使用javassist生成类七、MyBatis中接口代理机制及使用 八、Mybatis的小技巧 九、Mybatis参数处理十、Mybatis查询语句专题 十一、动态SQL 十一、Mybatis高级映射及延迟加载 十二、Mybatis缓存 十三、Mybatis逆向工程 十四、Mybatis分页插件 十五、Mybatis注解式开发 十六、Mybatis面试问题Mybatis中的动态SQLMybatis中的动态SQL是指可以根据实际情况生成不同SQL语句的一种特殊语法。通常情况下，动态SQL是用来构建复杂的SQL语句的，例如根据不同条件拼接where语句、根据传入的参数构建不同的查询条件等。Mybatis中提供了一些内置的动态SQL语句，例如if、choose、when、otherwise等，可以根据需要自由组合使用，从而构建出灵活多变的SQL语句。同时，Mybatis也支持使用OGNL表达式来处理动态SQL，可以实现更加灵活的条件组合。掌握动态SQL的使用，可以帮助开发者更加方便地构建出灵活、高效的数据访问逻辑，提升应用的性能和扩展性。Mybatis中的一对多映射在 Mybatis 中，一对多映射是指一个实体类中包含一个集合属性，该集合属性中包含多个与另一个实体类的对应关系，即一个实体类与另一个实体类是一对多的关系。例如，一个班级实体类包含多个学生实体类，那么班级实体类就是一的一方，学生实体类就是多的一方。在 Mybatis 中实现一对多映射，需要使用 Mybatis 提供的 association 和 collection 标签。association 标签用于定义单个对象之间的关系，而 collection 标签则用于定义集合对象之间的关系。具体来说，在映射文件中，需要先定义一的一方的查询语句，并使用 association 标签将多的一方的查询结果映射到一的一方中。然后，再定义多的一方的查询语句，并使用 collection 标签将多的一方的查询结果映射到一的一方的集合属性中。Mybatis中#{}和${}的区别在Mybatis中，#{}和${}都是用来表示参数占位符的，但是它们的作用是不同的。 #{}用于表示一个占位符，Mybatis会将传入的参数自动进行类型转换，然后将转换后的值安全地插入到SQL语句中。这种方式可以有效地防止SQL注入的风险。${}也用于表示一个占位符，但是它不会对传入的参数进行处理，直接将传入的字符串嵌入到SQL语句中。这种方式存在SQL注入的风险，应该尽量避免使用。因此，建议在Mybatis中使用#{}作为参数占位符，以确保系统的安全性。使用 #{} 时，Mybatis 会将 SQL 语句中的 #{} 替换成一个 ? 占位符，并使用 PreparedStatement 来执行 SQL 语句，这样就可以避免 SQL 注入等安全问题。同时，使用 #{} 还可以自动进行类型转换。","categories":[{"name":"Spring","slug":"Spring","permalink":"https://xingxin-99.github.io/categories/Spring/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"https://xingxin-99.github.io/tags/Spring/"}],"keywords":[{"name":"Spring","slug":"Spring","permalink":"https://xingxin-99.github.io/categories/Spring/"}]},{"title":"测试","slug":"测试","date":"2023-08-25T05:52:19.000Z","updated":"2023-08-25T07:15:16.994Z","comments":true,"path":"2023/08/25/测试/","link":"","permalink":"https://xingxin-99.github.io/2023/08/25/测试/","excerpt":"","text":"","categories":[{"name":"测试","slug":"测试","permalink":"https://xingxin-99.github.io/categories/测试/"}],"tags":[{"name":"测试","slug":"测试","permalink":"https://xingxin-99.github.io/tags/测试/"}],"keywords":[{"name":"测试","slug":"测试","permalink":"https://xingxin-99.github.io/categories/测试/"}]},{"title":"项目","slug":"项目","date":"2023-08-25T05:51:45.000Z","updated":"2023-08-25T07:15:12.645Z","comments":true,"path":"2023/08/25/项目/","link":"","permalink":"https://xingxin-99.github.io/2023/08/25/项目/","excerpt":"","text":"","categories":[{"name":"项目","slug":"项目","permalink":"https://xingxin-99.github.io/categories/项目/"}],"tags":[{"name":"项目","slug":"项目","permalink":"https://xingxin-99.github.io/tags/项目/"}],"keywords":[{"name":"项目","slug":"项目","permalink":"https://xingxin-99.github.io/categories/项目/"}]},{"title":"MySQL","slug":"MySQL","date":"2023-08-25T05:50:48.000Z","updated":"2023-08-25T07:15:46.000Z","comments":true,"path":"2023/08/25/MySQL/","link":"","permalink":"https://xingxin-99.github.io/2023/08/25/MySQL/","excerpt":"","text":"","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://xingxin-99.github.io/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://xingxin-99.github.io/tags/MySQL/"}],"keywords":[{"name":"MySQL","slug":"MySQL","permalink":"https://xingxin-99.github.io/categories/MySQL/"}]},{"title":"Redis","slug":"Redis","date":"2023-08-25T05:50:30.000Z","updated":"2023-08-25T07:22:28.702Z","comments":true,"path":"2023/08/25/Redis/","link":"","permalink":"https://xingxin-99.github.io/2023/08/25/Redis/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"https://xingxin-99.github.io/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"https://xingxin-99.github.io/categories/技术/"}]},{"title":"Spring","slug":"Spring","date":"2023-08-25T05:49:03.000Z","updated":"2023-08-25T07:15:18.553Z","comments":true,"path":"2023/08/25/Spring/","link":"","permalink":"https://xingxin-99.github.io/2023/08/25/Spring/","excerpt":"","text":"","categories":[{"name":"Spring","slug":"Spring","permalink":"https://xingxin-99.github.io/categories/Spring/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"https://xingxin-99.github.io/tags/Spring/"}],"keywords":[{"name":"Spring","slug":"Spring","permalink":"https://xingxin-99.github.io/categories/Spring/"}]},{"title":"Java","slug":"Java","date":"2023-06-24T14:06:19.000Z","updated":"2023-08-25T07:19:09.402Z","comments":true,"path":"2023/06/24/Java/","link":"","permalink":"https://xingxin-99.github.io/2023/06/24/Java/","excerpt":"","text":"Java","categories":[{"name":"Java","slug":"Java","permalink":"https://xingxin-99.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://xingxin-99.github.io/tags/Java/"}],"keywords":[{"name":"Java","slug":"Java","permalink":"https://xingxin-99.github.io/categories/Java/"}]},{"title":"Redis双写一致性","slug":"Redis双写一致性","date":"2023-05-24T12:24:16.000Z","updated":"2023-08-25T07:15:20.198Z","comments":true,"path":"2023/05/24/Redis双写一致性/","link":"","permalink":"https://xingxin-99.github.io/2023/05/24/Redis双写一致性/","excerpt":"","text":"双写一致性是为了保证数据库和缓存中的数据最终一致。 删除缓存还是更新缓存？ 写多读少场景下浪费性能如果采用更新缓存方式的话，那么每对数据库更新一次，就会更新一次缓存。在写多读少的场景下，如果进行了多次更新，但没有一次读取，那中间更新多次缓存的这个过程是没必要的且浪费性能的，因为我们希望读缓存时读的是相对最新的数据。因此目前大多采用类似于懒加载的这种模式，删除缓存后，不使用时不读缓存，只有使用时再去数据库中读取最新的数据。 脏数据问题线程1和线程2都要对数据库中的A数据进行写操作。线程1先执行，在写入数据库要更新缓存之前，线程2来对A进行更新并写入缓存，然后线程1再写入缓存。这导致缓存中是A更新后的数据而不是期望的B更新后的数据，导致最后缓存中出现了脏数据。 先更新数据库还是先删除缓存？ 使用延时双删，为什么要删除两次？为什么第一次要删除？为什么要进行延时？ 延时的目的： 线程B读取数据库，在还未更新缓存时，线程A更新数据库，删除缓存。线程B把读到的数据写入到缓存中，写入的是脏数据。进行延时，等到线程B将脏数据写入到缓存后在进行删除，降低了出现数据不一致性的可能。 主从同步，需要等待从库等待数据更新后再删除缓存，否则读取的还是从库中未更新的数据。 如何判断Reidis中的key删除失败？ Redis的DEL命令用于删除已存在的键，返回值是删除键的数量 redisTemplate.delete(key)，如果删除失败，返回false 如果延时双删，最后的删失败了怎么办？ 失败重试机制 同步重试 异步重试 使用消息队列 订阅binlog日志 使用canal组件订阅binlog日志，当发现binlog中有更新数据的日志时，删除相应的缓存。 定时任务将需要重试的数据写入到重试表中，重试表中有重试次数及数据状态，定时任务每隔一定时间读取重试表中的数据进行重试，如果成功，则将该数据删除，如果不成功则重试次数+1，如果重试次数达到指定值还未更新成功，则重试表中将该记录更新为失败状态。同时考虑是不是由于Redis宕机而导致了更新一直失败，考虑使用Redis集群来提高Redis服务的高可用性。 如何保证缓存与数据库的强一致性？ 如果要保证Redis与数据库的强一致性，可以靠考虑使用Redis的互斥锁实现。当要更新数据时，对要更新的key加上互斥锁，同时开启另一个线程对数据库执行写操作。当写操作执行完毕后释放锁。 如何不要求强一致性，可以怎么做？ 延时双删 Canal组件","categories":[{"name":"Redis","slug":"Redis","permalink":"https://xingxin-99.github.io/categories/Redis/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://xingxin-99.github.io/tags/Redis/"}],"keywords":[{"name":"Redis","slug":"Redis","permalink":"https://xingxin-99.github.io/categories/Redis/"}]},{"title":"Typora+PicGo+阿里云OSS上传图片","slug":"1","date":"2022-05-25T12:24:16.000Z","updated":"2023-08-25T07:19:07.822Z","comments":true,"path":"2022/05/25/1/","link":"","permalink":"https://xingxin-99.github.io/2022/05/25/1/","excerpt":"","text":"阿里云OSS 登陆进阿里云OSS 创建OSS Bucket 获取AccessKey 保存AccessKey ID与Secret，后面PicGo图床设置会使用到 PicGo 下载PicGo：Releases · Molunerfinn/PicGo (github.com) 选择显示图床 图床设置 验证图片是否能够上传成功 TyporaTypora上传图片设置：文件-&gt;偏好设置-&gt;图像","categories":[{"name":"技术","slug":"技术","permalink":"https://xingxin-99.github.io/categories/技术/"}],"tags":[{"name":"技术","slug":"技术","permalink":"https://xingxin-99.github.io/tags/技术/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://xingxin-99.github.io/categories/技术/"}]},{"title":"主题配置","slug":"主题配置","date":"2022-04-25T02:37:16.000Z","updated":"2023-08-25T07:15:09.984Z","comments":true,"path":"2022/04/25/主题配置/","link":"","permalink":"https://xingxin-99.github.io/2022/04/25/主题配置/","excerpt":"","text":"修改对话","categories":[{"name":"技术","slug":"技术","permalink":"https://xingxin-99.github.io/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"https://xingxin-99.github.io/categories/技术/"}]},{"title":"搭建博客时遇到的问题","slug":"搭建Blog时遇到的问题","date":"2022-03-24T12:24:16.000Z","updated":"2023-08-25T07:15:14.986Z","comments":true,"path":"2022/03/24/搭建Blog时遇到的问题/","link":"","permalink":"https://xingxin-99.github.io/2022/03/24/搭建Blog时遇到的问题/","excerpt":"","text":"问题：执行hexo d后报错ssh: connect to host github.com port 22: Connection refused，文件不能部署到Github中 解决：换一个端口号 进入.ssh目录，编辑配置文件config cd ~/.ssh vim config 编辑文件内容 Host github.com User git Hostname ssh.github.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa Port 443 Host gitlab.com Hostname altssh.gitlab.com User git Port 443 PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa 保存退出，检查是否成功 ssh -T git@github.com 验证hexo d能否成功部署资源到Github，结果成功 参考：Git问题 在分类下添加标签，没有显示创建出分类下的页面 解决： 先生成md文件，在md里添加分类，它会根据这个来生成html页面 创建成功后，再添加至配置文件中 hexo g 生成页面会发现页面已经成功生成 如何修改新的分类下的背景图片？","categories":[{"name":"技术","slug":"技术","permalink":"https://xingxin-99.github.io/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"https://xingxin-99.github.io/categories/技术/"}]}]}