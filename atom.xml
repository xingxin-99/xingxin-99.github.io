<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Star</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xingxin-99.github.io/"/>
  <updated>2023-08-27T08:50:26.002Z</updated>
  <id>https://xingxin-99.github.io/</id>
  
  <author>
    <name>Star</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测试</title>
    <link href="https://xingxin-99.github.io/2023/08/27/%E6%B5%8B%E8%AF%95-1/"/>
    <id>https://xingxin-99.github.io/2023/08/27/测试-1/</id>
    <published>2023-08-27T08:18:42.000Z</published>
    <updated>2023-08-27T08:50:26.002Z</updated>
    
    <content type="html"><![CDATA[<style>  table {    width: 100%; /*表格宽度*/    max-width: 65em; /*表格最大宽度，避免表格过宽*/    border: 1px solid #dedede; /*表格外边框设置*/    margin: 15px auto; /*外边距*/    border-collapse: collapse; /*使用单一线条的边框*/    empty-cells: show; /*单元格无内容依旧绘制边框*/  }  table th,  table td {    height: 25px; /*统一每一行的默认高度*/    font-size: 10px;  /*行内字符大小*/    border: 1px solid #dedede; /*内部边框样式*/    padding: 0 10px; /*内边距*/  }    table th {      font-size: 10px;  /*表头字符大小*/      font-weight: bold; /*加粗*/      text-align: center ; /*内容居中，加上 !important 避免被 Markdown 样式覆盖*/      background: rgba(158,188,226,0.2); /*背景色*/  }</style><h1 id="测试基础"><a href="#测试基础" class="headerlink" title="测试基础"></a>测试基础</h1><h2 id="什么是软件测试？"><a href="#什么是软件测试？" class="headerlink" title="什么是软件测试？"></a>什么是软件测试？</h2><table><thead><tr><th>复习时间</th><th>2023/8/6</th><th>2023/8/16</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>使用某些技术手段对软件进行操作，发现软件缺陷，判断软件是否满足使用需求</p><h2 id="什么是黑盒测试？"><a href="#什么是黑盒测试？" class="headerlink" title="什么是黑盒测试？"></a>什么是黑盒测试？</h2><table><thead><tr><th>复习时间</th><th>2023/8/4</th><th>2023/8/16</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>黑盒测试是指在进行测试时，我们看不见程序的源代码，只对程序的功能进行测试。<br>在测试的过程中主要关注输入与输出以及输出是否符合预期。<br>其中功能测试又可称为黑盒测试</p><h2 id="什么是白盒测试？"><a href="#什么是白盒测试？" class="headerlink" title="什么是白盒测试？"></a>什么是白盒测试？</h2><table><thead><tr><th>复习时间</th><th>2023/8/4</th><th>2023/8/16</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>白盒测试是指测试的过程中能看到程序的源代码，主要是对程序的源代码进行测试。测试者检查程序的内部结构，根据内部逻辑来设计测试用例。<br>比如单元测试就是一种白盒测试。<br>白盒测试根据软件的内部逻辑设计测试用例，常用的技术是逻辑覆盖，即考察用测试数据运行被测程序时对程序逻辑的覆盖程度。主要的覆盖标准有 6 种：语句覆盖、判定覆盖、条件覆盖、判定/条件覆盖、组合条件覆盖和路径覆盖。</p><h2 id="什么是灰盒测试？（集成测试、接口测试）"><a href="#什么是灰盒测试？（集成测试、接口测试）" class="headerlink" title="什么是灰盒测试？（集成测试、接口测试）"></a>什么是灰盒测试？（集成测试、接口测试）</h2><table><thead><tr><th>复习时间</th><th>2023/8/4</th><th>2023/8/16</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>灰盒测试是介于白盒测试和黑盒测试之间的一种测试方法，它能看见程序的部分源码，主要是对程序的接口进行测试。<br>在我们执行测试的过程中，一般是先进行单元测试，再进行集成测试，最后进行系统测试。在我们测试完成单个模块运行正确之后，还需要去验证单个模块与模块组合在一起时是否会出现问题，这个方式就是灰盒测试。 </p><h2 id="为什么进行了白盒测试之后还要进行黑盒测试？"><a href="#为什么进行了白盒测试之后还要进行黑盒测试？" class="headerlink" title="为什么进行了白盒测试之后还要进行黑盒测试？"></a>为什么进行了白盒测试之后还要进行黑盒测试？</h2><table><thead><tr><th>复习时间</th><th>2023/8/4</th><th>2023/8/16</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>白盒测试不仅仅关注输入与输出的结果是否正确，同时还关注程序是如何处理的。而黑盒测试在整个测试过程中只关注输入和输出，如果输入一个测试数据，输出的结果是正确的，我们就认为这个功能是正确的。虽然从某种角度来看，白盒测试比黑盒测试更为全面。但是有一些黑盒测试的内容是白盒测试不能做到的。比如黑盒测试是更接近于用户使用的测试，因此我们还会关注程序的易用性、界面展示、业务流程等，而白盒测试时并不考虑这些。</p><h2 id="测试的基本流程"><a href="#测试的基本流程" class="headerlink" title="测试的基本流程"></a>测试的基本流程</h2><table><thead><tr><th>复习时间</th><th>2023/8/16</th></tr></thead><tbody><tr><td></td></tr></tbody></table><ol><li>需求分析<br>阅读需求文档，联合前端、后端、测试、产品等部门，确保各部门对需求理解一致；了解软件的具体功能</li><li>计划编写<br>确定测试的目标、范围<br>对人力、物力进行分配，确定那些人要具体做哪些事情，对进度进行安排<br>确定要使用哪些测试工具、测试策略</li><li>用例设计<br>分析需求，从需求中提取测试点，来设计测试用例</li><li>用例执行，提交bug，回归测试<br>当进行测试后，会发现软件的缺陷。确定缺陷后，将缺陷提交给开发人员，开发人员修改后进行回归测试</li><li>测试报告</li></ol><h2 id="常见的黑盒测试方法有哪些？"><a href="#常见的黑盒测试方法有哪些？" class="headerlink" title="常见的黑盒测试方法有哪些？"></a>常见的黑盒测试方法有哪些？</h2><table><thead><tr><th>复习时间</th><th>2023/8/4</th><th>2023/8/16</th></tr></thead><tbody><tr><td></td></tr></tbody></table><ol><li><strong>等价类划分法（穷举场景）</strong><br>指在所有的测试数据中，对具有某种共同特征的数据集合进行划分，然后从每一个子集中选取<br>少数具有代表性的数据作为测试用例。<br><strong>举例：验证6-10位自然数QQ号的合法性</strong><br>按照等价类划分法：<br>有效等价类：6-10位自然数；无效等价类：&lt;6位，&gt;10位自然数，以及6-10位非自然数</li><li><strong>边界值分析（有边界范围）</strong><br>对输入、输出的边界值进行测试。<br>在边界值分析法中规范了要选择的边界值，上点、离点、内点</li><li><strong>因果图分析</strong><br>利用图解法分析输入的各种组合情况，从而设计测试用例的方法</li><li><strong>判定表法（多条件依赖关系）</strong><br>以表格形式表达多条件依赖逻辑判断的工具<br>判定表由条件桩、动作桩、条件项、动作项组成，根据条件项确定动作项，贯穿条件项和动作项的一列是一条规则<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/1691310738780-8fc6a32f-f14a-46ec-b105-2c42ac7f833f.png" alt="image.png"></li><li><strong>错误推测法</strong><br>根据测试者以往测试经验来对可能出现错误的地方进行测试。</li></ol><h2 id="为什么要进行自动化测试？"><a href="#为什么要进行自动化测试？" class="headerlink" title="为什么要进行自动化测试？"></a>为什么要进行自动化测试？</h2><table><thead><tr><th>复习时间</th><th>2023/8/16</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>自动化测试是指使用自动化测试工具来执行测试用例，它把以人为驱动的测试转变为以机器驱动，代替了我们手工执行测试的行为。</p><ol><li>通过采用自动化测试，可以替代大量重复性的工作，提高测试效率</li><li>保证每次测试的一致性和可重复性。由于每次自动化测试执行时脚本都是相同的，所以每次执行的测试具有一致性，同时也可以提高回归测试的效率。</li><li>可以更好的利用非工作时间。由于自动化测试能够哪找计划自动执行，因此就可以利用非工作时间使用自动化测试来执行测试。</li></ol><h2 id="测试用例编写规范"><a href="#测试用例编写规范" class="headerlink" title="测试用例编写规范"></a>测试用例编写规范</h2><table><thead><tr><th>用例编号</th><th>用例标题(预期结果+测试点)</th><th>测试模块/项目</th><th>用例级别</th><th>预置条件</th><th>测试步骤</th><th>测试数据</th><th>预期结果</th></tr></thead><tbody><tr><td>login_001</td><td>登陆失败（手机号未注册+非空密码）</td><td>login</td><td>P1</td><td>1.APP应用正常;2.网络正常</td><td>1.打开登录页面;2.输入手机号;3.输入密码;4.点击登录</td><td>手机号：13257894512;密码：1458796</td><td>登陆失败。提示：“手机号未注册”</td></tr></tbody></table><h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><table><thead><tr><th>Selenium组件</th><th>介绍</th></tr></thead><tbody><tr><td>Selenium WebDriver</td><td>模拟用户操作浏览器</td></tr><tr><td>Selenium IDE</td><td>提供录制Selenium测试用例</td></tr><tr><td>Selenium Grid</td><td>模拟多个操作系统/浏览器执行测试用例</td></tr></tbody></table><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="Linux如何实时查看日志记录？"><a href="#Linux如何实时查看日志记录？" class="headerlink" title="Linux如何实时查看日志记录？"></a>Linux如何实时查看日志记录？</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>less filename</td><td></td></tr><tr><td>tail notes.log</td><td>默认显示最后 10 行。</td></tr></tbody></table><p>-f 循环读取<br>-c&lt;数目&gt; 显示的字节数<br>-n&lt;行数&gt; 显示文件的尾部 n 行内容 |<br>| tail -f filename | 把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。 |<br>| tail -n +20 notes.log | 显示文件 notes.log 的内容，从第 20 行至文件末尾 |<br>| tail -c 10 notes.log | 显示文件 notes.log 的最后 10 个字符: |</p><h2 id="linux命令，统计一个文本中关键字出现的次数"><a href="#linux命令，统计一个文本中关键字出现的次数" class="headerlink" title="linux命令，统计一个文本中关键字出现的次数"></a>linux命令，统计一个文本中关键字出现的次数</h2><pre><code class="java">grep -o targetStr filename | wc -l</code></pre><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/1692771696392-1f1e0175-75f4-4e36-88dd-b7998d23db95.png" alt="image.png"></p><h2 id="linux-查找当前目录下所有后缀为-py文件"><a href="#linux-查找当前目录下所有后缀为-py文件" class="headerlink" title="linux 查找当前目录下所有后缀为 .py文件"></a>linux 查找当前目录下所有后缀为 .py文件</h2><pre><code class="java">find ./ -name &quot;*.py&quot;</code></pre><h2 id="linux常用命令：查看指定端口进程"><a href="#linux常用命令：查看指定端口进程" class="headerlink" title="linux常用命令：查看指定端口进程"></a>linux常用命令：查看指定端口进程</h2><pre><code class="java"># 查看某进程端口占用情况ps -ef |grep tomcatps -p PID 查看进程的详细信息</code></pre><h1 id="场景题"><a href="#场景题" class="headerlink" title="场景题"></a>场景题</h1><h2 id="设计购物车测试用例"><a href="#设计购物车测试用例" class="headerlink" title="设计购物车测试用例"></a>设计购物车测试用例</h2><h2 id="搜索页面设计测试用例"><a href="#搜索页面设计测试用例" class="headerlink" title="搜索页面设计测试用例"></a>搜索页面设计测试用例</h2><h2 id="抢红包设计测试用例"><a href="#抢红包设计测试用例" class="headerlink" title="抢红包设计测试用例"></a>抢红包设计测试用例</h2><h2 id="微信朋友圈测试用例"><a href="#微信朋友圈测试用例" class="headerlink" title="微信朋友圈测试用例"></a>微信朋友圈测试用例</h2><h2 id="支付测试用例"><a href="#支付测试用例" class="headerlink" title="支付测试用例"></a>支付测试用例</h2><h2 id="淘宝搜索框测试用例"><a href="#淘宝搜索框测试用例" class="headerlink" title="淘宝搜索框测试用例"></a>淘宝搜索框测试用例</h2><h1 id="开放性问题"><a href="#开放性问题" class="headerlink" title="开放性问题"></a>开放性问题</h1><h2 id="怎么理解的测开这个岗位"><a href="#怎么理解的测开这个岗位" class="headerlink" title="怎么理解的测开这个岗位"></a>怎么理解的测开这个岗位</h2>]]></content>
    
    <summary type="html">
    
      测试基础八股
    
    </summary>
    
      <category term="测试" scheme="https://xingxin-99.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="https://xingxin-99.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket</title>
    <link href="https://xingxin-99.github.io/2023/08/26/WebSocket/"/>
    <id>https://xingxin-99.github.io/2023/08/26/WebSocket/</id>
    <published>2023-08-26T10:50:39.000Z</published>
    <updated>2023-08-27T08:19:55.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><p>WbeSocket是一个基于TCP的一种新的<strong>网络协议</strong>（ws协议）（不同于Http协议），是一种<strong>全双工</strong>的通信协议，它即允许浏览器向服务器端推送消息，同时也允许服务器端向浏览器推送消息。浏览器和服务器只需要经历一次握手，就可以创建一个<strong>持久性连接</strong>，并在连接中进行双向数据传输。</p><h2 id="WebSocket和Http有什么不同？"><a href="#WebSocket和Http有什么不同？" class="headerlink" title="WebSocket和Http有什么不同？"></a>WebSocket和Http有什么不同？</h2><p>WebSocket是一种全双工的通信方式，它允许两端都可以主动的向对方推送消息，因此Websocket更像是现实生活中打电话的场景，电话接通后，双方都可以听到对方的信息。而Http它是请求响应模式，由客户端发出请求，浏览器回以响应。</p><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1690872227077-38fcaa95-6f59-4304-b42a-e2810bb76ba3.png" alt="image.png"></p><h2 id="Websocket的应用场景（页面不刷新，但数据可以实时变化）"><a href="#Websocket的应用场景（页面不刷新，但数据可以实时变化）" class="headerlink" title="Websocket的应用场景（页面不刷新，但数据可以实时变化）"></a>Websocket的应用场景（页面不刷新，但数据可以实时变化）</h2><p>视频弹幕、网页聊天（通过Websocket把聊天消息推送到页面中显示）、体育实况更新、股票基金报价实时更新</p><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1690871933655-8ae729f7-b16c-4a8c-a763-752cbab4137a.png" alt="image.png"></p><h2 id="WebSocket的原理是什么？"><a href="#WebSocket的原理是什么？" class="headerlink" title="WebSocket的原理是什么？"></a>WebSocket的原理是什么？</h2><p>客户端向服务器发送建立连接的请求，此时发送的请求信息如下：</p><pre><code class="java">GET /chat HTTP/1.1Host: server.example.comUpgrade: websocketConnection: UpgradeSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==Sec-WebSocket-Protocol: chat, superchatSec-WebSocket-Version: 13Origin: http://example.com</code></pre><p><strong>Upgrade: </strong>在 HTTP 请求中，Upgrade 头部字段通知服务器客户端希望升级到其他协议。它指示服务器在响应中是否支持升级，并将协议更改为请求中指定的协议。<br><strong>Connection: Upgrade :</strong> 在 HTTP 请求中，Connection 头部字段指示客户端是否希望与服务器建立持久连接。而当与 Upgrade 头部一同使用时，Connection: Upgrade 表示客户端希望升级到其他协议，并要求服务器在响应中进行协议升级。<br>在服务器的响应中，如果支持升级到 WebSocket，会包含如下的响应头部：</p><pre><code class="java">HTTP/1.1 101 Switching ProtocolsUpgrade: websocketConnection: UpgradeSec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</code></pre><p>这样，客户端和服务器之间的连接就会从普通的 HTTP 连接升级为 WebSocket 连接，后续通信将使用 WebSocket 协议。</p><h2 id="在WeSocket之前是如何进行实时通信的？"><a href="#在WeSocket之前是如何进行实时通信的？" class="headerlink" title="在WeSocket之前是如何进行实时通信的？"></a>在WeSocket之前是如何进行实时通信的？</h2><ol><li><strong>轮询。</strong>客户端定期向服务器发送请求，判断服务器中是否有新的数据可用。<br>拿来单提醒这个功能举例，如果不使用WebSocket，就需要客户端向服务端轮询的发起查询请求，判断数据库中是否存在新的还未进行来单提醒订单数据，如果存在的话，则将来单提醒需要的信息返回给前端。<br><strong>缺点：</strong>会在客户端与服务器之间产生大量的请求与响应，导致不必要的网络开销和延迟。</li><li><strong>长轮询。</strong>客户端发出请求后，保持连接打开，等待新数据响应后在关闭连接。<br><strong>优缺点：</strong>解决了无效轮询的数量，但仍然需要频繁建立和关闭连接。</li><li><strong>Comet。</strong>模拟实时通信，在返回请求后继续保持连接打开。核心思想是保持长连接来实现实时通信，并允许服务器通过流式传输等推送技术来主动向客户端推送消息。<br><strong>缺点： </strong>该方法依然依赖于无状态的HTTP连接，其要求服务器端有特殊的功能(类似于流式传输等推送技术)来临时挂起连接。  </li></ol><h2 id="WebSocket的优势"><a href="#WebSocket的优势" class="headerlink" title="WebSocket的优势"></a>WebSocket的优势</h2><ol><li><strong>双向实时通信。</strong>在单个、长时间的连接上进行双向实时通信。在需要快速实时更新的应用程序里，比HTTP更高效。</li><li><strong>降低延迟。</strong>数据可用在客户端与服务器之间以比HTTP更低的延迟进行传输。（头部相对较小；在长连接里传输数据，不必在每次建立连接）</li><li><strong>更高效的资源利用。</strong>由于连接只建立了一次，因此减少了重复请求和响应的开销</li></ol><h2 id="WebSocket的限制"><a href="#WebSocket的限制" class="headerlink" title="WebSocket的限制"></a>WebSocket的限制</h2><ol><li>不提供加密功能。如果传输的数据要保证安全性，需采用像SSL这样的协议</li><li>不支持古老浏览器。</li><li>保持长连接需要服务器不断维护和处理连接的状态。</li></ol><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol><li>使用websocket.html页面作为WebSocket客户端（由客户端向服务端发送握手请求，服务端响应后，二者就建立了持久连接）</li><li>导入WebSocket的maven坐标</li><li>导入WebSocket服务端组件WebSocketServer（接收客户端发来的请求并处理，类似于Controller），用于和客户端通信</li><li>导入配置类WebSocketConfiguration，注册WebSocket的服务端组件</li><li>导入定时任务类WebSocketTask，定时向客户端推送数据（用于测试，可有可无）</li></ol><table><thead><tr><th>函数/注解</th><th>作用</th></tr></thead><tbody><tr><td>new WebSocket(url)</td><td>向地址为url的服务端建立连接，并返回ws对象，里面提供了连接相关的API</td></tr><tr><td>@ServerEndpoint(“/ws/{sid}”)</td><td>将目前的类定义成一个websocket服务器端, 注解的值将被用于监听用户连接的终端访问URL地址,客户端可以通过这个URL来连接到WebSocket服务器端</td></tr><tr><td>@OnOpen</td><td>连接建立成功调用方法</td></tr><tr><td>@OnMessage</td><td>收到客户端消息后调用方法</td></tr></tbody></table><h3 id="WebSocket组件"><a href="#WebSocket组件" class="headerlink" title="WebSocket组件"></a><strong>WebSocket组件</strong></h3><pre><code class="java">package com.sky.websocket;import org.springframework.stereotype.Component;import javax.websocket.OnClose;import javax.websocket.OnMessage;import javax.websocket.OnOpen;import javax.websocket.Session;import javax.websocket.server.PathParam;import javax.websocket.server.ServerEndpoint;import java.util.Collection;import java.util.HashMap;import java.util.Map;/** * WebSocket服务 */@Component//标识该类为WebSokcet服务器端，监听该URL地址，客户端可通过该URL连接到该服务器端@ServerEndpoint(&quot;/ws/{sid}&quot;)public class WebSocketServer {    //存放会话对象    //一个Session就是一个会话，当客户端与服务端建立连接后，就会生成一个session会话    private static Map&lt;String, Session&gt; sessionMap = new HashMap();    /**     * 连接建立成功调用的方法     * sid为客户端的标识，连接建立成功则把该会话存入到map中     */    @OnOpen    public void onOpen(Session session, @PathParam(&quot;sid&quot;) String sid) {        System.out.println(&quot;客户端：&quot; + sid + &quot;建立连接&quot;);        sessionMap.put(sid, session);    }    /**     * 收到客户端消息后调用的方法     *     * @param message 客户端发送过来的消息     */    @OnMessage    public void onMessage(String message, @PathParam(&quot;sid&quot;) String sid) {        System.out.println(&quot;收到来自客户端：&quot; + sid + &quot;的信息:&quot; + message);    }    /**     * 连接关闭调用的方法     *     * @param sid     */    @OnClose    public void onClose(@PathParam(&quot;sid&quot;) String sid) {        System.out.println(&quot;连接断开:&quot; + sid);        sessionMap.remove(sid);    }    /**     * 群发     *     * @param message     */    public void sendToAllClient(String message) {        Collection&lt;Session&gt; sessions = sessionMap.values();        for (Session session : sessions) {            try {                //服务器向客户端发送消息                session.getBasicRemote().sendText(message);            } catch (Exception e) {                e.printStackTrace();            }        }    }}</code></pre><p><strong>定义配置类，注册WebSocket的服务端组件</strong></p><pre><code class="java">package com.sky.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.socket.server.standard.ServerEndpointExporter;/** * WebSocket配置类，用于注册WebSocket的Bean */@Configurationpublic class WebSocketConfiguration {    @Bean    public ServerEndpointExporter serverEndpointExporter() {        return new ServerEndpointExporter();    }}</code></pre><h2 id="来单提醒功能实现"><a href="#来单提醒功能实现" class="headerlink" title="来单提醒功能实现"></a>来单提醒功能实现</h2><ol><li><p>通过WebSocket来实现管理端页面和服务端保持长连接<br><strong>服务端：</strong>引入WebSocket依赖，注册WebSokcet组件，监听Websocket客户端发送的建立连接消息<strong>浏览器：</strong>在前端页面中已经写好了WebSocket相关的js代码，登录成功后，页面解析js代码，向服务端发送建立连接的请求，服务端收到请求后响应消息，客户端和服务端的长连接建立成功，之后双方便可通过该连接推送消息<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1690875135416-180d3208-9438-42c2-a697-5046a90bfdd6.png" alt="image.png"></p></li><li><p>当客户支付后，调用WebSocket的相关API实现服务端向客户端推送消息<br>当客户支付成功后，微信端会调用我们写好的一个回调方法paySuccess()来执行支付成功后的处理逻辑，因此我们在该回调函数的逻辑中补充了由服务器端向客户端推送消息的代码。<br><strong>主要逻辑：</strong>注入WebSocketServer对象，生成我们要发送到客户端的JSON消息，调用写好的向客户端推送消息的API（浏览器端与服务器端建立长连接后生成一个session对象，通过这个session对象向客户端发送消息），将该消息推送到客户端页面</p></li></ol><pre><code class="java">@Autowiredprivate WebSocketServer webSocketServer;/** * 支付成功，修改订单状态 * * @param outTradeNo */public void paySuccess(String outTradeNo) {    // 当前登录用户id    Long userId = BaseContext.getCurrentId();    // 根据订单号查询当前用户的订单    Orders ordersDB = orderMapper.getByNumberAndUserId(outTradeNo, userId);    // 根据订单id更新订单的状态、支付方式、支付状态、结账时间    Orders orders = Orders.builder()            .id(ordersDB.getId())            .status(Orders.TO_BE_CONFIRMED)            .payStatus(Orders.PAID)            .checkoutTime(LocalDateTime.now())            .build();    orderMapper.update(orders);    //////////////////////////////////////////////    Map map = new HashMap();    map.put(&quot;type&quot;, 1);//消息类型，1表示来单提醒    map.put(&quot;orderId&quot;, orders.getId());    map.put(&quot;content&quot;, &quot;订单号：&quot; + outTradeNo);    //通过WebSocket实现来单提醒，向客户端浏览器推送消息    webSocketServer.sendToAllClient(JSON.toJSONString(map));    ///////////////////////////////////////////////////}</code></pre><pre><code class="java">/** * 群发 * * @param message */public void sendToAllClient(String message) {    Collection&lt;Session&gt; sessions = sessionMap.values();    for (Session session : sessions) {        try {            //服务器向客户端发送消息            session.getBasicRemote().sendText(message);        } catch (Exception e) {            e.printStackTrace();        }    }}</code></pre><ol start="3"><li>客户端浏览器解析服务端推送的消息，判断是来单提醒还是客户催单，进行相应的消息提示和语音播报（前端页面已实现）</li><li>约定服务端发送给客户端浏览器的数据格式为JSON，字段包括：type，orderId，content<ol><li>type 为消息类型，1为来单提醒 2为客户催单</li><li>orderId 为订单id</li><li>content 为消息内容</li></ol></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7020964728386093093#heading-4" target="_blank" rel="noopener">一文吃透 WebSocket 原理 刚面试完，趁热赶紧整理 - 掘金</a><br><a href="https://www.bilibili.com/video/BV1ac411c7vr/?spm_id_from=333.337.search-card.all.click&amp;vd_source=028fc5fb3f265ee4a69cb86472cc5bba" target="_blank" rel="noopener">10 分钟 理论 + 实操 搞懂 WebSocket_哔哩哔哩_bilibili</a></p>]]></content>
    
    <summary type="html">
    
      WebSocket的原理？为什么要使用WebSokcet？在使用WebSocket之前是如何进行实时通信的？
    
    </summary>
    
      <category term="项目" scheme="https://xingxin-99.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="WebSocket" scheme="https://xingxin-99.github.io/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>JWT安全认证</title>
    <link href="https://xingxin-99.github.io/2023/08/26/JWT%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/"/>
    <id>https://xingxin-99.github.io/2023/08/26/JWT安全认证/</id>
    <published>2023-08-26T10:50:12.000Z</published>
    <updated>2023-08-26T10:57:05.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JWT安全认证"><a href="#JWT安全认证" class="headerlink" title="JWT安全认证"></a>JWT安全认证</h1><p>JWT的全称为Json Web Tocken，它通过数字签名的方式，以Json对象为载体，实现在客户端和服务器之间安全的传输数据。JWT由三部分组成，这三部分分别是Header、Payload、Signature，这三部分之间用.拼接。<br>当用户第一次登录后，生成JWT，并将其以tocken返回给前端。后续客户端每次发起的请求都包含JWT。系统在处理请求之前，会先使用拦截器拦截请求，对请求中的JWT进行安全校验，通过之后才放行<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1690885408290-547a9b12-a012-48bd-a46a-6830d725d5ad.png" alt="image.png"></p><h2 id="JWT组成"><a href="#JWT组成" class="headerlink" title="JWT组成"></a>JWT组成</h2><ol><li>Header由两部分组成：token的类型以及签名算法的名称。</li></ol><pre><code class="java">{    &#39;alg&#39;: &quot;HS256&quot;,    &#39;typ&#39;: &quot;JWT&quot;}</code></pre><p>用Base64对这个JSON编码就得到JWT的第一部分</p><ol start="2"><li>Payload(负载)：在负载中可以声明一些用于传输的数据，比如用户名等信息</li></ol><pre><code class="java">{    &quot;sub&quot;: &#39;1234567890&#39;,    &quot;name&quot;: &#39;john&#39;,    &quot;admin&quot;:true}</code></pre><ol start="3"><li>Signature：对head和payload按照指定的签名算法进行签名，保证JWT没有被篡改过</li></ol><pre><code class="java">var encodedString = base64UrlEncode(header) +&#39;.&#39;+ base64UrlEncode(payLoad);var signature = HMACSHA256(encodedString,&#39;secret&#39;);</code></pre><blockquote><p>如何能确保JWT没有被篡改过？</p></blockquote><ul><li>首先，JWT由头部、负载、签名三部分组成，头部包含了tocken类型以及使用的签名算法，而负载中有我们所声明的JSON型的数据信息，而签名是对头部和负载进行base64编码后，通过签名算法以及服务器端生成的秘钥对base64编码后的头部和负载进行签名。如果有人对头部和负载内容解码之后再生成新的JWT，由于它不知道服务器端秘钥，因此服务器端进行JWT校验失败，就判断此JWT已经被篡改。</li></ul><p>参考：<br><a href="https://blog.csdn.net/Top_L398/article/details/109361680" target="_blank" rel="noopener">JWT详细教程与使用<em>jwt教程</em>一支有理想的月月鸟的博客-CSDN博客</a></p><h2 id="在项目中如何实现JWT安全认证的？"><a href="#在项目中如何实现JWT安全认证的？" class="headerlink" title="在项目中如何实现JWT安全认证的？"></a>在项目中如何实现JWT安全认证的？</h2><ol><li>引入JWT的相关依赖</li><li>通过<code>Jwts.builder</code>去创建一个jwt，通过<code>setClaims</code>方法设置私有声明，私有声明就是我们想在服务器与客户端传送的数据，通过<code>signWith</code>方法设置签名使用的签名算法及签名秘钥，通过<code>setExpiration</code>方法设置签名过期时间，通过<code>compact</code>方法将这些信息组合，生成JWT</li></ol><pre><code class="java">public class JwtUtil {    /**     * 生成jwt     * 使用Hs256算法, 私匙使用固定秘钥     *     * @param secretKey jwt秘钥     * @param ttlMillis jwt过期时间(毫秒)     * @param claims    设置的信息     * @return     */    public static String createJWT(String secretKey, long ttlMillis, Map&lt;String, Object&gt; claims) {        // 指定签名的时候使用的签名算法，也就是header那部分        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;        // 生成JWT的时间        long expMillis = System.currentTimeMillis() + ttlMillis;        Date exp = new Date(expMillis);        // 设置jwt的body        JwtBuilder builder = Jwts.builder()                // 如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的                .setClaims(claims)                // 设置签名使用的签名算法和签名使用的秘钥                .signWith(signatureAlgorithm, secretKey.getBytes(StandardCharsets.UTF_8))                // 设置过期时间                .setExpiration(exp);        return builder.compact();    }    /**     * Token解密     *     * @param secretKey jwt秘钥 此秘钥一定要保留好在服务端, 不能暴露出去, 否则sign就可以被伪造, 如果对接多个客户端建议改造成多个     * @param token     加密后的token     * @return     */    public static Claims parseJWT(String secretKey, String token) {        // 得到DefaultJwtParser        Claims claims = Jwts.parser()                // 设置签名的秘钥                .setSigningKey(secretKey.getBytes(StandardCharsets.UTF_8))                // 设置需要解析的jwt                .parseClaimsJws(token).getBody();        return claims;    }}</code></pre><ol start="3"><li>后端将tocken传递到前端，那么之后每次发送请求时，请求的header中都携带该tocken信息。当前端发起请求时，首先会在拦截器中拦截该请求，并从请求头中获取该tocken进行JWT校验，校验失败则返回“用户未登录”的信息。校验成功则放行，继续接下来的处理逻辑。</li></ol><pre><code class="java">/** * jwt令牌校验的拦截器 */@Component@Slf4jpublic class JwtTokenAdminInterceptor implements HandlerInterceptor {    @Autowired    private JwtProperties jwtProperties;    /**     * 校验jwt     *     * @param request     * @param response     * @param handler     * @return     * @throws Exception     */    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        //判断当前拦截到的是Controller的方法还是其他资源        if (!(handler instanceof HandlerMethod)) {            //当前拦截到的不是动态方法，直接放行            return true;        }        //1、从请求头中获取令牌        String token = request.getHeader(jwtProperties.getAdminTokenName());        //2、校验令牌        try {            log.info(&quot;jwt校验:{}&quot;, token);            Claims claims = JwtUtil.parseJWT(jwtProperties.getAdminSecretKey(), token);            Long empId = Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());            /////将用户id存储到ThreadLocal////////            BaseContext.setCurrentId(empId);            ////////////////////////////////////            log.info(&quot;当前员工id：&quot;, empId);            //3、通过，放行            return true;        } catch (Exception ex) {            //4、不通过，响应401状态码            response.setStatus(401);            return false;        }    }}</code></pre><pre><code class="java">sky:  jwt:    # 设置jwt签名加密时使用的秘钥    admin-secret-key: itcast    # 设置jwt过期时间    admin-ttl: 7200000    # 设置前端传递过来的令牌名称    admin-token-name: token    user-secret-key: itheima    user-ttl: 7200000    user-token-name: authentication</code></pre><pre><code class="java">@Component@ConfigurationProperties(prefix = &quot;sky.jwt&quot;)@Datapublic class JwtProperties {    /**     * 管理端员工生成jwt令牌相关配置     */    private String adminSecretKey;    private long adminTtl;    private String adminTokenName;    /**     * 用户端微信用户生成jwt令牌相关配置     */    private String userSecretKey;    private long userTtl;    private String userTokenName;}</code></pre><h2 id="cookie、session、token的区别"><a href="#cookie、session、token的区别" class="headerlink" title="cookie、session、token的区别"></a>cookie、session、token的区别</h2><p>由于Http是无状态协议，因此对于服务器来说，它接收到的每个请求都是独立的请求，服务器并不会去记录每个请求之间的联系。但是对于更多的使用场景，我们需要去让服务器记录此次发来的请求是哪个客户端发送来的，比如用户登录进某个网站之后，那么接下来的请求，用户就不需要每次在重复登录，进行身份验证。而通过cookie、session、token我们就能够让服务器端识别发起请求的客户端。</p><ol><li>cookie它是存储在浏览器中的，并且cookie的大小有限制，一般不超过4KB。由于cookie存储在客户端的，因此一般认为cookie不够安全，别人可以直接对本地的cookie进行分析。当浏览器向服务器端发送请求时，那么服务器端首先会判断是否已经为发出该请求的客户端创建了对应的session，如果没有的话，则创建session，并在响应头中设置set-cookie，set-cookie中包含了生成的sessionId。浏览器接收到该响应后，浏览器在下次请求头中自动携带cookie。服务器端接收到请求之后先验证cookie信息，比如验证cookie中的session信息是否存在，存在则正常响应，不存在则拦截返回错误信息。</li><li>session它是存储在服务器端的一个对象，它的大小没有限制，由于是存储在服务器端，因此一般认为session中存储的数据是安全的。当客户端与服务器端建立连接后，它会在服务器端生成一个具有唯一sessionId的session。我们可以把用户的id信息存储到session中，当下次客户端发送请求时，通过判断该session中是否存在用户信息来判断用户的登录状态。但是session也有一些缺点，由于session它是保存在内存中的，因此当有很多客户端和服务器端建立连接时，那么就会在服务器端创建很多session，这样就占用了服务器的内存资源。另外session它并不适用于分布式的环境，比如当有两个tomcat服务器时，采用轮询方式访问服务器，那么用户就要进行多次登录。</li><li>tocken本质上我们可以把它看做一个加密后的字符串，它是由服务器生成，然后相应给客户端，客户端接收之后把它存储到localstorage等地方，之后客户端每次发送请求都会在请求头中携带tocken信息。tokcen</li></ol>]]></content>
    
    <summary type="html">
    
      是如何通过JWT实现安全认证的？原理是什么？
    
    </summary>
    
      <category term="项目" scheme="https://xingxin-99.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="JWT" scheme="https://xingxin-99.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="https://xingxin-99.github.io/2023/08/25/%E6%B5%8B%E8%AF%95/"/>
    <id>https://xingxin-99.github.io/2023/08/25/测试/</id>
    <published>2023-08-25T05:52:19.000Z</published>
    <updated>2023-08-25T07:15:16.994Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="测试" scheme="https://xingxin-99.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="https://xingxin-99.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>项目</title>
    <link href="https://xingxin-99.github.io/2023/08/25/%E9%A1%B9%E7%9B%AE/"/>
    <id>https://xingxin-99.github.io/2023/08/25/项目/</id>
    <published>2023-08-25T05:51:45.000Z</published>
    <updated>2023-08-25T07:15:12.645Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="项目" scheme="https://xingxin-99.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="项目" scheme="https://xingxin-99.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="https://xingxin-99.github.io/2023/08/25/MySQL/"/>
    <id>https://xingxin-99.github.io/2023/08/25/MySQL/</id>
    <published>2023-08-25T05:50:48.000Z</published>
    <updated>2023-08-25T07:15:46.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="MySQL" scheme="https://xingxin-99.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://xingxin-99.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://xingxin-99.github.io/2023/08/25/Redis/"/>
    <id>https://xingxin-99.github.io/2023/08/25/Redis/</id>
    <published>2023-08-25T05:50:30.000Z</published>
    <updated>2023-08-25T07:22:28.702Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="技术" scheme="https://xingxin-99.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="https://xingxin-99.github.io/2023/08/25/Spring/"/>
    <id>https://xingxin-99.github.io/2023/08/25/Spring/</id>
    <published>2023-08-25T05:49:03.000Z</published>
    <updated>2023-08-25T07:15:18.553Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Spring" scheme="https://xingxin-99.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://xingxin-99.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>点评项目</title>
    <link href="https://xingxin-99.github.io/2023/06/26/%E7%82%B9%E8%AF%84%E9%A1%B9%E7%9B%AE/"/>
    <id>https://xingxin-99.github.io/2023/06/26/点评项目/</id>
    <published>2023-06-26T09:01:04.000Z</published>
    <updated>2023-08-26T10:55:40.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、短信登陆"><a href="#一、短信登陆" class="headerlink" title="一、短信登陆"></a>一、短信登陆</h1><h2 id="集群Session问题"><a href="#集群Session问题" class="headerlink" title="集群Session问题"></a>集群Session问题</h2><p>每个Tomcat服务器都有自己独立的Session空间，多个Tomcat服务器不会共享Session存储空间，因此当请求切换到其他的Tomcat服务器时，由于该服务器的Session中并没有保存用户相关信息，因此请求会被拦截，需要用户重新进行登录校验，导致用户体验感变差。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691048466795-847d7772-0269-4044-b9fa-bd236b39f42d.png" alt="image.png"><br><strong>解决方案：</strong></p><ol><li>Session拷贝<ol><li>在不同的session中存储相同数据，浪费空间</li><li>维护数据同步浪费资源</li><li>数据不一致</li></ol></li><li>替代Session<ol><li>session中存储的是登录校验的数据，在每次请求中都会被访问。而session是基于内存的，读写效率高。因此要求替代品要求有较高的读写效率（基于内存）</li><li>能实现数据共享（Redis独立于Tomcat之外，任何一个tomcat都能访问到redis）</li><li>key、value结构</li></ol></li></ol><h2 id="Redis保存数据"><a href="#Redis保存数据" class="headerlink" title="Redis保存数据"></a>Redis保存数据</h2><p>将验证码和用户信息保存到redis中。保存用户信息到redis中时，考虑到后续每次请求都会通过key，找到value；通过判断value是否存来进行登录校验。因此需要设计合适的key。</p><table><thead><tr><th>key</th><th>value</th></tr></thead><tbody><tr><td>phone:13507690339</td><td>9874</td></tr><tr><td>tocken:</td><td>{name:;}</td></tr></tbody></table><p><strong>特殊情况：</strong><br>在拦截器中只拦截了必须登录才有权限看到的页面，对于首页等这种无需登录的页面并没有拦截。如果用户一直在这种页面中，那么tokcen的有效期就不会刷新，因此tocken到时间之后会失效。<br><strong>需求：</strong>只要用户在浏览页面，就让tocken刷新。因此设置两个拦截器，第一个拦截器拦截所有页面，用于刷新tocken；第二个拦截器进行身份校验。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691050904279-e268b922-f90a-409a-ba5e-0bebbd34a037.png" alt="image.png"><br><strong>优化：</strong><br><strong>使用JWT来进行登录校验。这样就不需要再将用户的信息保存到redis中，而是可以在tocken中获取用户信息。</strong></p><h1 id="二、缓存"><a href="#二、缓存" class="headerlink" title="二、缓存"></a>二、缓存</h1><p><strong>缓存：</strong>数据交换的缓冲区，临时存储数据的地方，读写性能比较高<br>实际开发中,会构筑多级缓存来使系统运行速度进一步提升,例如:本地缓存与redis中的缓存并发使用<br><strong>浏览器缓存</strong>：主要是存在于浏览器端的缓存<br><strong>应用层缓存</strong>：可以分为tomcat本地缓存，比如之前提到的map，或者是使用redis作为缓存<br><strong>数据库缓存：</strong>在数据库中有一片空间是 buffer pool，增改查数据都会先加载到mysql的缓存中<br><strong>CPU缓存：</strong>当代计算机最大的问题是 cpu性能提升了，但内存读写速度没有跟上，所以为了适应当下的情况，增加了cpu的L1，L2，L3级的缓存<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691114486248-28f9e8a0-fb32-4267-9bfd-6c4df58b9ee7.png" alt="image.png"></p><h2 id="缓存更新"><a href="#缓存更新" class="headerlink" title="缓存更新"></a>缓存更新</h2><blockquote><p>已经存储到redis中的数据，什么时候会触发更新操作？</p></blockquote><ol><li><strong>内存淘汰</strong></li></ol><p>当Redis的内存满了之后，触发内存淘汰机制，自动淘汰掉Redis中的一部分数据</p><ol start="2"><li><strong>超时剔除</strong></li></ol><p>当向Redis中存储数据时，设置数据的过期时间，到期自动删除。下次查询时发现缓存不存在，从数据库中查询，再写入到缓存中。<br>不足：若数据在有效期内进行了修改，从Redis中获取的仍然是旧数据</p><ol start="3"><li><strong>主动更新</strong></li></ol><p>由程序员编写业务逻辑，当修改数据库时，同时更新缓存中的数据。</p><h3 id="主动更新策略"><a href="#主动更新策略" class="headerlink" title="主动更新策略"></a>主动更新策略</h3><ol><li>Cache Aside Pattern</li><li></li></ol><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><blockquote><p>项目中对商铺信息进行了缓存，如果在某一时刻有大量请求去查询了不存在的商铺，造成缓存穿透现象，该怎么解决？</p></blockquote><h3 id="缓存空对象"><a href="#缓存空对象" class="headerlink" title="缓存空对象"></a>缓存空对象</h3><p>先查询缓存，判断商铺信息是否存在。如果存在，还需判断商铺对应的Key缓存的Value是否是空对象(“”)。如果是的话，则返回店铺不存在的错误信息。如果不是空对象的话，则说明数据库中有该商铺信息的数据。则到数据库中进行查询，并存入到redis中。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691744029562-efc0d838-4b39-45e1-b313-a4e2bc8d1589.png" alt="image.png"><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691744162956-0e73a5d4-6d59-4113-a413-83799433e06d.png" alt="image.png"></p><h3 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h3><h3 id="增加ID复杂度，避免被猜测ID规律"><a href="#增加ID复杂度，避免被猜测ID规律" class="headerlink" title="增加ID复杂度，避免被猜测ID规律"></a>增加ID复杂度，避免被猜测ID规律</h3><p>防止被猜到不存在数据库中的ID，而被恶意的向这些ID发起大量查询请求</p><h3 id="对ID进行格式校验"><a href="#对ID进行格式校验" class="headerlink" title="对ID进行格式校验"></a>对ID进行格式校验</h3><p>先对ID进行校验，把不符合格式的ID的请求过滤掉</p><h3 id="对热点参数做限流"><a href="#对热点参数做限流" class="headerlink" title="对热点参数做限流"></a>对热点参数做限流</h3><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p><strong>解决方案</strong></p><ol><li><strong>为不同的Key的TTL添加随机值</strong>（如果是做了<strong>缓存预热</strong>，批量将一批key添加至缓存，并设置TTL，那么为了不让这批key同一时间过期而导致缓存血崩的问题，将key设置30min+产生的一个随机数，让TTL随机）</li><li><strong>利用Redis集群提高服务的可用性</strong>（<strong>解决宕机</strong>导致Redis雪崩的思路）</li><li><strong>给缓存业务添加降级限流的策略</strong>（比如当Redis的<strong>整个集群都宕机</strong>时，添加快速失败、拒绝服务等策略）</li><li><strong>给业务添加多级缓存</strong>（<strong>多个层面建立缓存</strong>，一个缓存崩掉了，还有其他的缓存起一个缓冲作用，浏览器本地-&gt;Nginx-&gt;Redis-&gt;JVM-&gt;数据库，像京东为商品详情就做了多级缓存，从而应对亿级以上的并发）</li></ol><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>缓存击穿问题也叫热点Key问题，就是一个被<strong>高并发访问（比如秒杀商品）</strong>并且<strong>缓存重建业务较复杂（比如这个数据需要多表关联运算，查取比较耗时）</strong>的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691825342901-7667b49b-a6c4-4ea6-806d-a318e9458239.png" alt="image.png"><br><strong>解决方案：</strong></p><ol><li><strong>互斥锁（一致性）<br>优点：</strong>没有额外的内存消耗（没有添加expire字段）<br>  保证了强一致性<br>  实现简单<br><strong>缺点：</strong>性能较低（其中一个线程进行缓存重建时，其他想要读取该数据的线程都会处于等待状态）<br>  有死锁风险<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691825453595-8bddc0a9-7a03-44f3-b925-9f6bc498f302.png" alt="image.png"></li><li><strong>逻辑过期（可用性）（一般是为热点Key设置逻辑过期，比如某一秒杀商品详情信息，当秒杀商品下架时，再把该key从Redis中移除。）</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691825534186-8056dc83-b0ba-4d91-a3f7-8903178b2cbb.png" alt="image.png"><br><strong>优点：</strong>性能较好，线程无须等待<br><strong>缺点：</strong>不保证一致性<br>  有额外内存消耗（添加了expire字段）<br>  实现复杂<br>在向Redis中添加数据时，设置一个逻辑过期字段expire，值为存入的系统当前时间+有效期<br><strong>流程：</strong>线程1查询Redis，发现数据过期，则获取互斥锁，同时开启另一个线程去读取数据库的数据，重建缓存。线程1仍然读取旧数据，并缓存。此时其他线程从Redis中查询数据，发现逻辑过期，尝试获取互斥锁来重建缓存。但获取互斥锁失败，则返回过期数据。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691826072497-42227dd8-8124-41d8-aff6-0f493e59f0b4.png" alt="image.png"></li></ol><h3 id="互斥锁实现"><a href="#互斥锁实现" class="headerlink" title="互斥锁实现"></a>互斥锁实现</h3><p>由于Redis中设置Key时，有一个命令SETNX，它只有key不存在时，才会设置值，同时返回结果1。如果key不存在，则返回0。因此可以通过它来实现互斥锁，如果有一个线程想要获取互斥锁，则根据SETNX来为某一个key设置值，同时返回true，那么该线程则知道获取锁成功。其他的线程想要获取该互斥锁时，发现SETNX返回的结果为0，则知道已经有线程获取了该锁。当持有互斥锁的线程进行缓存重建后，要释放互斥锁，否则其他线程将会一直处于重试等待状态。<br>另外，考虑到如果释放互斥锁执行失败，导致锁没有释放掉，其他线程一直等待，因此可以在SETNX时，为互斥锁的key添加过期时间。比如缓存重建业务的时间可能为100ms，则设置互斥锁的过期时间为它的10倍左右，设置为1000ms。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691826930178-d411edb3-3ecc-4b43-baa7-a910c6c1a6d9.png" alt="image.png"></p><pre><code class="java">// 获取锁private boolean tryLock(String key) {    Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(key, &quot;1&quot;, 10, TimeUnit.SECONDS);    return BooleanUtil.isTrue(flag);}// 释放锁private void unlock(String key) {    stringRedisTemplate.delete(key);}</code></pre><pre><code class="java">public Shop queryShopByIdSolvePenetrateWithWriteMutex(Long id) {        String shopJson = stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);        //如果redis未命中查数据库        if (StrUtil.isNullOrUndefined(shopJson)){            //在查数据库之前先获取锁            String lockKey=LOCK_SHOP_KEY+id;            try {                boolean isLock = tryLock(lockKey);                if (!isLock){                    //如果获取锁失败了休眠一段时间后重试                    Thread.sleep(50);                    return queryShopByIdSolvePenetrateWithWriteMutex(id);                }                //以下为获得锁成功                Shop shop = shopService.getById(id);                //数据库也不存则写入空数据到Redis                if (shop==null){                    //                    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id,&quot;&quot;,CACHE_NULL_TTL,TimeUnit.MINUTES);                    queryShopByIdSolveBreakWithWriteNull(id);                }                //数据库存在则将数据写进redis                shopJson = JSONUtil.toJsonStr(shop);                stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id,shopJson,CACHE_SHOP_TTL,TimeUnit.MINUTES);                //写进缓存后再释放锁            } catch (InterruptedException e) {                e.printStackTrace();            } finally {                unlock(lockKey);            }            //重新查一遍，就可以从redis获得数据            return queryShopByIdSolveBreakWithWriteNull(id);        }        //如果命中了redis,但是为空,直接返回空对象        if (StrUtil.isBlank(shopJson)){            return null;        }        //如果命中了redis且不为空,重置时间        stringRedisTemplate.expire(CACHE_SHOP_KEY+id,CACHE_SHOP_TTL,TimeUnit.MINUTES);        Shop shop = JSONUtil.toBean(shopJson, Shop.class);        return shop;    }</code></pre><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691827595420-4acc0fd4-e1a8-4a17-b218-10e0e3eaae59.png" alt="image.png"><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691827952813-23bfd29e-dc15-470a-9101-9767136bcd1e.png" alt="image.png"><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691827983300-73b26cf3-eac2-47cc-8b78-a73c9fb848f1.png" alt="image.png"></p><h3 id="逻辑过期实现"><a href="#逻辑过期实现" class="headerlink" title="逻辑过期实现"></a>逻辑过期实现</h3><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691828166895-54166c8f-ccad-4931-8f14-df566f984555.png" alt="image.png"></p><blockquote><p>逻辑过期字段怎么添加？</p></blockquote><ol><li>直接在实体类中添加逻辑过期字段（违背开闭原则）</li><li>设计一个新的类，类里有逻辑过期字段，让实体类继承该类（仍然违背开闭原则）</li><li>设计一个新的类，类里有逻辑过期以及实体类两个属性（采用）</li></ol><pre><code class="java">@Datapublic class RedisData {    private LocalDateTime expireTime;    private Object data;}</code></pre><blockquote><p>逻辑过期代码如何实现？</p></blockquote><p>由于需要开启一个独立线程去执行缓存重建，因此创建了一个线程池（线程的创建和销魂不用我们关心），并在线程池里去提交缓冲重建的任务。</p><pre><code class="java">//创建一个固定线程池private static final ExecutorService CACHE_REBUILD_EXECUTOR = Executors.newFixedThreadPool(10);/**     * 用逻辑过期时间解决缓存穿透     * @param id     * @return     */    public Shop queryShopByIdSolvePenetrateWithWriteLogicalExpireTime(Long id) {        String redisDataJson = stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);        //如果redis未命中查数据库        if (StrUtil.isEmpty(redisDataJson)){            //未命中说明不是热点数据（会把热点数据进行缓存预热，存入到Redis中），转入处理缓存击穿的函数                        return null;        }        //如果命中了redis且不为空，将其反序列化成对象，拿到逻辑过期时间        RedisData redisData = JSONUtil.toBean(redisDataJson, RedisData.class);        Shop shop = JSONUtil.toBean((JSONObject) redisData.getData(), Shop.class);        LocalDateTime expireTime = redisData.getExpireTime();        //如果时间已经过期，直接返回旧数据并开启新线程修改数据        if (expireTime.isBefore(LocalDateTime.now())){            //在开启新线程之前获得锁，锁的名称要与锁的id关联，修改不同的id可以并行，一样的id才需要加锁            String lockKey=LOCK_SHOP_KEY+id;            try {                boolean isLock = tryLock(lockKey);                //获取锁成功                if (isLock){                    //开启新线程用线程池，性能比自己创建线程好                    CACHE_REBUILD_EXECUTOR.execute(()-&gt;{                        //重建缓存                        saveShopWithExpireTimeToRedis(id,30L);                    });                }            } catch (Exception e) {                e.printStackTrace();            } finally {                unlock(lockKey);            }        }        return shop;    }</code></pre><h1 id="三、秒杀问题"><a href="#三、秒杀问题" class="headerlink" title="三、秒杀问题"></a>三、秒杀问题</h1><p><strong>优惠券字段结构</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691831777614-f7826c44-0560-45aa-866d-613317d9a300.png" alt="image.png"></p><h2 id="全局唯一ID"><a href="#全局唯一ID" class="headerlink" title="全局唯一ID"></a>全局唯一ID</h2><blockquote><p> 如果订单ID为自增型，会存在什么样的问题？（订单特点：数据量大、唯一）</p></blockquote><ol><li><strong>ID规律太明显。</strong>由于订单ID会暴露给用户，因此用户可以从ID推测出一些信息。（比如，今天某一用户下订单时，订单ID为100；到第二天，下订单时订单ID为200，因此如果是自增的话，用户就能推测到在此期间卖掉了100单。）</li><li><strong>受单表数据量的限制</strong>（如果采取自增，则之后对表做拆分，会出现订单重复）</li></ol><blockquote><p>全局唯一ID生成策略有哪些</p></blockquote><ol><li><strong>UUID</strong>（十六进制字符串，无单调递增的特性）</li><li><strong>Redis自增</strong></li><li><strong>snowflake算法</strong>（采用long类型64位数字，和下面采用的Redis生成ID策略很相似）<br>自增采用的当前机器的自增，而Redis是不管用的任何分布式系统，都是用的Redis作为自增。</li><li><strong>数据库自增</strong></li></ol><h3 id="全局ID生成器（把Redis作为全局ID生成器）"><a href="#全局ID生成器（把Redis作为全局ID生成器）" class="headerlink" title="全局ID生成器（把Redis作为全局ID生成器）"></a>全局ID生成器（把Redis作为全局ID生成器）</h3><p>由于Redis是全局的，独立于Mysql之外的，因此可以使用Redis中的自增数值来实现生成全局唯一ID<br><strong>特点：</strong></p><ol><li><strong>唯一性</strong></li><li><strong>高可用</strong>（找该生成器生成ID时，这个生成器不能宕机）</li><li><strong>高性能</strong>（生成ID速度快）</li><li><strong>递增性</strong>（递增的话，方便建立和维护索引）</li><li><strong>安全性</strong>（不能被用户猜测到ID规律）</li></ol><p>ID采用数值类型（long型8个字节），数值类型在数据库中占用空间更小且建立索引更方便<br>如果时间戳相同，可以通过序列号来生成不同ID<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691836282305-54cf87f0-7f91-44a4-8179-4822dbc50c4c.png" alt="image.png"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>生成的序列号为什么还要拼接上时间？</p></blockquote><p>Reids的自增数值上限2^64，如果对于一个业务，全都按照相同的key递增，那么经过几年之后可能就会出现数值超出的异常。<br><strong>解决（一天一个key）：</strong>以天为单位，拼上时间，每一天都有不同的key，让其重新递增。另外这种方式还可以起到一个统计的效果。</p><pre><code class="java">long count = stringRedisTemplate.opsForValue().increment(&quot;icr:&quot; + keyPrefix); //并没有采取这种方案// 2.生成序列号// 2.1.获取当前日期，精确到天String date = now.format(DateTimeFormatter.ofPattern(&quot;yyyy:MM:dd&quot;));// 2.2.自增长long count = stringRedisTemplate.opsForValue().increment(&quot;icr:&quot; + keyPrefix + &quot;:&quot; + date);</code></pre><blockquote><p>如何将时间戳和序列号进行拼接？</p></blockquote><p>由于返回的为long型，因此不能利用String进行简单的拼接。让时间戳在高位而序列号在低位的话，可以通过位运算让时间戳移动到高位，再通过或运算让序列号填充在低位。</p><pre><code class="java">timestamp &lt;&lt; COUNT_BITS | count</code></pre><p><strong>整体代码实现：</strong></p><pre><code class="java">public class RedisIdWorker {    /**     * 开始时间戳：以2020年0点0分为起点     */    private static final long BEGIN_TIMESTAMP = 1640995200L;    /**     * 序列号的位数     */    private static final int COUNT_BITS = 32;    private StringRedisTemplate stringRedisTemplate;    public RedisIdWorker(StringRedisTemplate stringRedisTemplate) {        this.stringRedisTemplate = stringRedisTemplate;    }    //  keyPrefix:可以看做是业务前缀，比如订单业务，店铺业务等    public long nextId(String keyPrefix) {        // 1.生成时间戳        LocalDateTime now = LocalDateTime.now();        long nowSecond = now.toEpochSecond(ZoneOffset.UTC);        long timestamp = nowSecond - BEGIN_TIMESTAMP;        // 2.生成序列号        // 2.1.获取当前日期，精确到天        String date = now.format(DateTimeFormatter.ofPattern(&quot;yyyy:MM:dd&quot;));        // 2.2.自增长        long count = stringRedisTemplate.opsForValue().increment(&quot;icr:&quot; + keyPrefix + &quot;:&quot; + date);        // 3.拼接并返回        return timestamp &lt;&lt; COUNT_BITS | count;    }}</code></pre><h2 id="实现优惠秒杀下单"><a href="#实现优惠秒杀下单" class="headerlink" title="实现优惠秒杀下单"></a>实现优惠秒杀下单</h2><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691844655965-b8745f39-007f-4d8b-bd28-3b117469e29a.png" alt="image.png"><br><strong>平价劵</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691844737553-6cc8dc1b-b61a-45c7-8198-9be7709e8461.png" alt="image.png"><br><strong>特价劵（劵信息的补充）</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691844820713-ee7da33c-c5e2-4cdd-ad49-533e3d71aefd.png" alt="image.png"><br><strong>订单</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691845192779-e5d01262-3de0-4c9a-98d0-cbefb1253b43.png" alt="image.png"><br><strong>接口</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691845102323-a76d8506-c3f1-4f80-a2f3-42541dd25ec0.png" alt="image.png"><br><strong>下单时需要判断两点：</strong></p><ul><li>秒杀是否开始或结束，如果尚未开始或已经结束则无法下单</li><li>库存是否充足，不足则无法下单</li></ul><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691845526205-c56e4100-4bce-4379-bede-1417db915814.png" alt="image.png"></p><h2 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h2><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691846050334-de2b05fc-9f48-435f-bdca-8ed14b33b11d.png" alt="image.png"></p><blockquote><p>如果使用乐观锁，每次只能以数据是否变更为依据，那该怎么优化？</p></blockquote><p>分段锁。将库存分到多张表里，每次锁一个表中的数据（类似jdk1.7中的ConcurrentHashMap分段锁的思想）</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p><strong>版本号法</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691846257299-8bf5d16a-bf56-49cb-9df7-bdeebad0134f.png" alt="image.png"><br><strong>CAS法</strong>（通过库存数据本身有没有变化来判断能不能进行减库存操作）<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691846474602-10e92962-ad1f-4c3d-a2eb-12f4e4e79010.png" alt="image.png"></p><pre><code class="java">//获取库存int stock =  seckillVoucherService.getStockById(Id);// 6.扣减库存boolean success = seckillVoucherService.update()        .setSql(&quot;stock = stock - 1&quot;) // set stock = stock - 1        .eq(&quot;voucher_id&quot;, voucherId).eq(&quot;stock&quot;, stock) // where id = ? and stock &gt; 0        .update();</code></pre><p><strong>并发测试（在进行CAS优化超卖问题后，进行并发测试，异常比例大大增加）</strong><br><strong>模拟200个并发请求</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691846622133-e8f0e578-a57b-4583-9a50-fdbfbae5ebb8.png" alt="image.png"><br><strong>异常值高达90%</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691846651235-3281525b-68f3-4dd4-a73c-dfc31afb54cf.png" alt="image.png"><br><strong>在最开始的请求中就出现库存不足的错误信息</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691846712624-ebd9d4d6-0a18-4c70-b5a9-b71d10bcc036.png" alt="image.png"><br><strong>库存卖出21件</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691846749081-5ec0e62c-5b68-46d3-af93-fe144f6f4c7f.png" alt="image.png"><br><strong>生成21条订单数据（没有出现超卖问题）</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691846777012-571ce082-79b0-4848-815b-ebc893d2a74a.png" alt="image.png"><br><strong>分析问题原因（认为只要有线程更改，就会产生并发安全问题）：</strong><br>在库存数量充足的情况下，同一时间仍然只能有一个线程能对库存更新成功，其他线程由于查询库存数量变化，均导致更新失败，成功率过低。<br><strong>优化：</strong></p><pre><code class="java">// 6.扣减库存boolean success = seckillVoucherService.update()        .setSql(&quot;stock = stock - 1&quot;) // set stock = stock - 1        .eq(&quot;voucher_id&quot;, voucherId).gt(&quot;stock&quot;, 0) // where id = ? and stock &gt; 0        .update();</code></pre><p><strong>并发测试</strong><br><strong>200个并发请求，100个线程下单成功，异常50%，符合预期</strong><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691847222855-fbed7b27-f50a-420a-ae29-e39db034181c.png" alt="image.png"><br><strong>数据库中优惠券库存为0</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691847243830-dadd6671-2c1d-4880-a8f5-103b053dc73a.png" alt="image.png"><br><strong>数据库中订单数量为100</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691847265120-b832787f-f2e1-407b-b9c4-34aef8de572d.png" alt="image.png"></p><h2 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h2><blockquote><p>实现思路是什么？</p></blockquote><p>当用户下单时，先根据用户id和优惠券id查询订单表中是否已经存在了该订单，如果存在，则返回异常结果。如果不存在，则走下单逻辑。<br><strong>解决思路：根据查询出来的订单数量，判断是否重复下单</strong></p><pre><code class="java">// 5.1.查询订单int count = query().eq(&quot;user_id&quot;, userId).eq(&quot;voucher_id&quot;, voucherId).count();// 5.2.判断是否存在if (count &gt; 0) {    // 用户已经购买过了    log.error(&quot;不允许重复下单！&quot;);    return;}</code></pre><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691848112144-f331617b-67fa-4331-a567-cc62787612b6.png" alt="image.png"><br><strong>并发测试（模拟一个用户发起的200个请求）</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691848475495-4a53ff7b-233d-46bd-b28f-628c207bd4ec.png" alt="image.png"><br>由于发送的请求头中携带的是相同的tocken，因此服务器识别为同一个用户<img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691848525794-71f201ba-e538-4539-9a63-2b56f03d5e27.png" alt="image.png"><br><strong>失败比例95%</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691848618411-9842f33b-2418-4345-80e5-f0b6faa97bed.png" alt="image.png"><br><strong>库存数量：-10（100 -&gt; 90）</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691848650549-64b74451-5d5b-4fd8-983a-4ccf6ed9c0f0.png" alt="image.png"><br><strong>订单数量：10 （0 -&gt; 10）</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691848661806-f89bddbc-1a44-48cf-9dd2-066f44272b62.png" alt="image.png"></p><blockquote><p>为什么实现了一人一单的逻辑后，仍然出现了一个用户下多个订单的问题？</p></blockquote><p>这仍然是因为多线程并发时，多个线程同时查询得到了count为0，然后进行了扣减库存的操作。和库存超卖问题类似。<br><strong>解决思路：将查询订单数量和生成订单变成原子性操作</strong><br><strong>Sycronized锁解决</strong></p><pre><code class="java">@Transactionalpublic Result createVoucherOrder(Long voucherId) {    // 5.一人一单    Long userId = UserHolder.getUser().getId();  //如果直接锁userId，每次锁住的其实是不同的userId对象，因此没有作用    synchronized (userId.toString().intern()) {        // 5.1.查询订单        int count = query().eq(&quot;user_id&quot;, userId).eq(&quot;voucher_id&quot;, voucherId).count();        // 5.2.判断是否存在        if (count &gt; 0) {            // 用户已经购买过了            return Result.fail(&quot;用户已经购买过一次！&quot;);        }        // 6.扣减库存        boolean success = seckillVoucherService.update()                .setSql(&quot;stock = stock - 1&quot;) // set stock = stock - 1                .eq(&quot;voucher_id&quot;, voucherId).gt(&quot;stock&quot;, 0) // where id = ? and stock &gt; 0                .update();        if (!success) {            // 扣减失败            return Result.fail(&quot;库存不足！&quot;);        }        // 7.创建订单        VoucherOrder voucherOrder = new VoucherOrder();        // 7.1.订单id        long orderId = redisIdWorker.nextId(&quot;order&quot;);        voucherOrder.setId(orderId);        // 7.2.用户id        voucherOrder.setUserId(userId);        // 7.3.代金券id        voucherOrder.setVoucherId(voucherId);        save(voucherOrder);        // 7.返回订单id        return Result.ok(orderId);    }}</code></pre><p>如果仅仅采用上述这种方式，那么在事务提交前，锁已经释放，此时创建订单的记录还未写入到数据库中。因此可能有其他线程获取锁，并创建订单，仍然造成多线程并发不安全的情况。<br><strong>解决思路：先获取锁-&gt;执行逻辑，提交事务-&gt;再释放锁。</strong></p><pre><code class="java">public Result seckillVoucher(Long voucherId) {    // 1.查询优惠券    SeckillVoucher voucher = seckillVoucherService.getById(voucherId);    // 2.判断秒杀是否开始    if (voucher.getBeginTime().isAfter(LocalDateTime.now())) {        // 尚未开始        return Result.fail(&quot;秒杀尚未开始！&quot;);    }    // 3.判断秒杀是否已经结束    if (voucher.getEndTime().isBefore(LocalDateTime.now())) {        // 尚未开始        return Result.fail(&quot;秒杀已经结束！&quot;);    }    // 4.判断库存是否充足    if (voucher.getStock() &lt; 1) {        // 库存不足        return Result.fail(&quot;库存不足！&quot;);    }  // 5.一人一单    Long userId = UserHolder.getUser().getId();  synchronized (userId.toString().intern()) {        Object proxy = AopContext.currentProxy();        return proxy.createVoucherOrder(voucherId);    }    }</code></pre><pre><code class="java">@Transactionalpublic Result createVoucherOrder(Long voucherId) {    // 5.一人一单    Long userId = UserHolder.getUser().getId();  //如果直接锁userId，每次锁住的其实是不同的userId对象，因此没有作用    // 5.1.查询订单    int count = query().eq(&quot;user_id&quot;, userId).eq(&quot;voucher_id&quot;, voucherId).count();    // 5.2.判断是否存在    if (count &gt; 0) {        // 用户已经购买过了        return Result.fail(&quot;用户已经购买过一次！&quot;);    }    // 6.扣减库存    boolean success = seckillVoucherService.update()            .setSql(&quot;stock = stock - 1&quot;) // set stock = stock - 1            .eq(&quot;voucher_id&quot;, voucherId).gt(&quot;stock&quot;, 0) // where id = ? and stock &gt; 0            .update();    if (!success) {        // 扣减失败        return Result.fail(&quot;库存不足！&quot;);    }    // 7.创建订单    VoucherOrder voucherOrder = new VoucherOrder();    // 7.1.订单id    long orderId = redisIdWorker.nextId(&quot;order&quot;);    voucherOrder.setId(orderId);    // 7.2.用户id    voucherOrder.setUserId(userId);    // 7.3.代金券id    voucherOrder.setVoucherId(voucherId);    save(voucherOrder);    // 7.返回订单id    return Result.ok(orderId);}</code></pre><blockquote><p>为什么没有直接调用createVoucherOrder()，而是通过调用代理对象的createVoucherOrder()的方法？</p></blockquote><p>Spring中的事务失效的一种情况。如果直接调用createVoucherOrder()，由于它并不是代理对象，因此不具有事务功能。<br><strong>并发测试</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691903564085-12ab1425-3ed6-4822-b478-ebcc01072236.png" alt="image.png"><br>200个请求中只有一个请求能下单成功，满足要求<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691903576250-d83f54d7-887f-4859-8877-fdd8af1a512b.png" alt="image.png"><br>库存-1<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691903589184-bd5eb2ba-639e-4a2e-a740-79be8485ec1e.png" alt="image.png"><br>订单+1<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691903599263-50a5035b-c8a4-474e-bfa6-27eaf3e7cbef.png" alt="image.png"></p><blockquote><p>上述这种方式会出现什么问题？</p></blockquote><p>在单体式情况下能保证一人一单的业务需求。但若将业务系统部署到多台服务器上，仍然会出现并发问题。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691904327454-59f1c186-3c90-476a-b1c0-02f9c52927d0.png" alt="image.png"><br>虽然仍然是对同一个userId上锁，但由于不同的服务器都拥有自己的JVM，JVM常量池中的userId对象是不同的，因此它们关联的锁监视器也不同。当服务器1中的线程1获取了互斥锁后，有线程2想要获取服务器2的互斥锁，它发现锁监视器为空，因此仍然能获取互斥锁成功，导致仍然出现一人下多单的问题。<br><strong>解决思路：让所有的JVM共享一把锁（分布式锁）</strong></p><h1 id="四、分布式锁"><a href="#四、分布式锁" class="headerlink" title="四、分布式锁"></a>四、分布式锁</h1><p><strong>分布式锁：</strong>满足分布式系统或集群模式下多进程可见并且互斥的锁。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691909044417-5b9865c8-4d19-4d9c-86b9-5509ea2a3a48.png" alt="image.png"><br><strong>可见性：</strong>多个线程都能看到相同的结果，注意：这个地方说的可见性并不是并发编程中指的内存可见性，只是说多个进程之间都能感知到变化的意思<br><strong>互斥：</strong>互斥是分布式锁的最基本的条件，使得程序串行执行<br><strong>高可用（主要看是否支持集群模式）</strong>：程序不易崩溃，时时刻刻都保证较高的可用性<br><strong>高性能</strong>：由于加锁本身就让性能降低，所有对于分布式锁本身需要他就较高的加锁性能和释放锁性能<br><strong>安全性（比如锁的释放）</strong>：安全也是程序中必不可少的一环<br><strong>常见的分布式锁：</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691909737356-1923d9dd-27d3-430c-9700-afb4d166d041.png" alt="image.png"></p><h2 id="分布式锁实现"><a href="#分布式锁实现" class="headerlink" title="分布式锁实现"></a>分布式锁实现</h2><p>实现分布式锁时需要实现的两个基本方法：</p><ul><li>获取锁：<ul><li>互斥：确保只能有一个线程获取锁</li><li>非阻塞：尝试一次，成功返回true，失败返回false<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691910045860-7271dd6a-d002-4009-8955-cb0d107190ce.png" alt="image.png"></li></ul></li><li>释放锁：<ul><li>手动释放</li><li>超时释放：获取锁时添加一个超时时间<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691910070586-ebf82fae-9478-43c1-9333-0462c9e09b70.png" alt="image.png"></li></ul></li></ul><p>核心思路：<br>利用redis 的setNx命令，第一个线程执行了SETNX后，redis 中就有这个key 了，返回了1，如果结果是1，则表示他抢到了锁，那么他去执行业务，然后再删除锁，退出锁逻辑，没有抢到锁的线程，等待一定时间后重试即可</p><blockquote><p>问题：执行EXPIRE指令可以为锁设置过期时间，但是如果在SETNX之后，EXPIRE之前，服务器宕机了，导致没有为锁设置上过期时间，怎么办？</p></blockquote><p>在SET命令后可以跟上许多参数，其中就包括NX与EX，如果加上了NX，那么此时效果就和SETNX等价。同时在加上EX设置过期时间，将这两条指令结合为一条指令。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691910332978-f2a109b9-973b-4de7-a714-155f61ecfe9f.png" alt="image.png"><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691910805300-2a0bbc5d-b0ad-465d-92f1-e5406056a35c.png" alt="image.png"><br><strong>锁接口</strong></p><pre><code class="java">public interface ILock {    /**     * 尝试获取锁     * @param timeoutSec 锁持有的超时时间，过期后自动释放     * @return true代表获取锁成功; false代表获取锁失败     */    boolean tryLock(long timeoutSec);    /**     * 释放锁     */    void unlock();}</code></pre><h2 id="实现版本1（使用Redis的SetNX分布式锁来为创建订单业务加锁）"><a href="#实现版本1（使用Redis的SetNX分布式锁来为创建订单业务加锁）" class="headerlink" title="实现版本1（使用Redis的SetNX分布式锁来为创建订单业务加锁）"></a>实现版本1（使用Redis的SetNX分布式锁来为创建订单业务加锁）</h2><pre><code class="java">public class SimpleRedisLock implements ILock {    private String name;    private StringRedisTemplate stringRedisTemplate;    public SimpleRedisLock(String name, StringRedisTemplate stringRedisTemplate) {        this.name = name;        this.stringRedisTemplate = stringRedisTemplate;    }    private static final String KEY_PREFIX = &quot;lock:&quot;;    //key为业务相关，值为线程id    @Override    public boolean tryLock(long timeoutSec) {        // 获取线程标示        String threadId =  Thread.currentThread().getId();        // 获取锁        Boolean success = stringRedisTemplate.opsForValue()                .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);        //由于会拆箱，防止空指针异常        return Boolean.TRUE.equals(success);    }    @Override    public void unlock() {            // 释放锁            stringRedisTemplate.delete(KEY_PREFIX + name);        }    }}</code></pre><p>业务代码优化（一人一单，替换Sycronized）</p><pre><code class="java">@Overridepublic Result seckillVoucher(Long voucherId) {    // 1.查询优惠券    SeckillVoucher voucher = seckillVoucherService.getById(voucherId);    // 2.判断秒杀是否开始    if (voucher.getBeginTime().isAfter(LocalDateTime.now())) {        // 尚未开始        return Result.fail(&quot;秒杀尚未开始！&quot;);    }    // 3.判断秒杀是否已经结束    if (voucher.getEndTime().isBefore(LocalDateTime.now())) {        // 尚未开始        return Result.fail(&quot;秒杀已经结束！&quot;);    }    // 4.判断库存是否充足    if (voucher.getStock() &lt; 1) {        // 库存不足        return Result.fail(&quot;库存不足！&quot;);    }    Long userId = UserHolder.getUser().getId();  //--------------------------------------------------------------------------------    //创建锁对象(新增代码)    SimpleRedisLock lock = new SimpleRedisLock(&quot;order:&quot; + userId, stringRedisTemplate);    //获取锁对象    boolean isLock = lock.tryLock(1200);    //加锁失败    if (!isLock) {        return Result.fail(&quot;不允许重复下单&quot;);    }    try {        //获取代理对象(事务)        IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy();        return proxy.createVoucherOrder(voucherId);    } finally {        //释放锁        lock.unlock();    }}</code></pre><blockquote><p>上述方法仍然会存在哪些问题？</p></blockquote><p>线程1获取锁后由于某个原因阻塞，导致业务还没执行完，锁的过期时间已经到了，因此锁自动释放。此时线程2获取锁并执行业务，而线程1业务恢复，执行业务完毕后仍然会执行释放锁的代码。此时线程3可以获取锁，继续执行业务，导致仍然会出现并发安全问题。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691912128297-b050bcae-b641-45ef-bdc0-720f9e37cec0.png" alt="image.png"></p><blockquote><p>如何解决上述问题？</p></blockquote><p>在线程释放锁的时候去判断锁标识是否和当前一致，如果一致，才释放锁。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691912497542-9e0b400d-4cfb-4276-97cd-690b0d95c6c0.png" alt="image.png"><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691912371310-efc6af15-4767-4b32-9cc1-9274af71ca3c.png" alt="image.png"></p><h2 id="实现版本2（解决线程误删锁问题）"><a href="#实现版本2（解决线程误删锁问题）" class="headerlink" title="实现版本2（解决线程误删锁问题）"></a>实现版本2（解决线程误删锁问题）</h2><p><strong>需求：</strong>修改之前的分布式锁实现，满足：<strong>在获取锁时存入线程标示（可以用UUID表示）在释放锁时先获取锁中的线程标示，判断是否与当前线程标示一致</strong></p><ul><li>如果一致则释放锁</li><li>如果不一致则不释放锁</li></ul><p>核心逻辑：在存入锁时，放入自己线程的标识，在删除锁时，判断当前这把锁的标识是不是自己存入的，如果是，则进行删除，如果不是，则不进行删除。</p><blockquote><p>为什么使用UUID，而不是直接使用线程ID？</p></blockquote><p>由于线程ID在每个JVM内部都是递增的，因此可能会出现不同的服务器中线程ID相同的情况，导致出现冲突。<br><strong>获取锁</strong></p><pre><code class="java">private static final String ID_PREFIX = UUID.randomUUID().toString(true) + &quot;-&quot;;@Overridepublic boolean tryLock(long timeoutSec) {   // 获取线程标示   String threadId = ID_PREFIX + Thread.currentThread().getId();   // 获取锁   Boolean success = stringRedisTemplate.opsForValue()                .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);   return Boolean.TRUE.equals(success);}</code></pre><p><strong>释放锁</strong></p><pre><code class="java">public void unlock() {    // 获取线程标示    String threadId = ID_PREFIX + Thread.currentThread().getId();    // 获取锁中的标示    String id = stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);    // 判断标示是否一致    if(threadId.equals(id)) {        // 释放锁        stringRedisTemplate.delete(KEY_PREFIX + name);    }}</code></pre><blockquote><p>上述代码仍然存在什么问题？（极端误删情况）</p></blockquote><p>线程1执行业务，在判断锁标识是否一致，要释放锁之前，发生了阻塞（比如FULL GC）。在阻塞过程中，锁超时释放。此时线程2获取锁并执行，但线程1恢复执行，那么就释放掉线程2的锁，导致仍然出现并发安全问题。<br><strong>问题原因所在：锁标志判断和释放非原子性</strong><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691913419720-4f48a831-e513-4cde-9595-b7a6157d0586.png" alt="image.png"></p><h2 id="实现版本3（Lua脚本将查询锁标志和释放锁变成原子性操作）"><a href="#实现版本3（Lua脚本将查询锁标志和释放锁变成原子性操作）" class="headerlink" title="实现版本3（Lua脚本将查询锁标志和释放锁变成原子性操作）"></a>实现版本3（Lua脚本将查询锁标志和释放锁变成原子性操作）</h2><p>Redis提供了Lua脚本功能，在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性。Lua是一种编程语言，它的基本语法大家可以参考网站：<a href="https://www.runoob.com/lua/lua-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/lua/lua-tutorial.html</a>，这里重点介绍Redis提供的调用函数，我们可以使用lua去操作redis，又能保证他的原子性，这样就可以实现拿锁比锁删锁是一个原子性动作了，作为Java程序员这一块并不作一个简单要求，并不需要大家过于精通，只需要知道他有什么作用即可。<br>这里重点介绍Redis提供的调用函数，语法如下：<br>redis.call(‘命令名称’, ‘key’, ‘其它参数’, …)<br>例如，我们要执行set name jack，则脚本是这样：</p><pre><code class="lua"># 执行 set name jackredis.call(&#39;set&#39;, &#39;name&#39;, &#39;jack&#39;)</code></pre><p>例如，我们要先执行set name Rose，再执行get name，则脚本如下：</p><pre><code class="lua"># 先执行 set name jackredis.call(&#39;set&#39;, &#39;name&#39;, &#39;Rose&#39;)# 再执行 get namelocal name = redis.call(&#39;get&#39;, &#39;name&#39;)# 返回return name</code></pre><p>通过EVAL命令执行脚本<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691915652096-481e213a-ed0c-496b-998f-ac679db5e84c.png" alt="image.png"><br>接下来我们来回一下我们释放锁的逻辑：<br>释放锁的业务流程是这样的<br>  1、获取锁中的线程标示<br>  2、判断是否与指定的标示（当前线程标示）一致<br>  3、如果一致则释放锁（删除）<br>  4、如果不一致则什么都不做<br>如果用Lua脚本来表示则是这样的：<br>最终我们操作redis的拿锁比锁删锁的lua脚本就会变成这样</p><pre><code class="lua">-- 这里的 KEYS[1] 就是锁的key，这里的ARGV[1] 就是当前线程标示-- 获取锁中的标示，判断是否与当前线程标示一致if (redis.call(&#39;GET&#39;, KEYS[1]) == ARGV[1]) then  -- 一致，则删除锁  return redis.call(&#39;DEL&#39;, KEYS[1])end-- 不一致，则直接返回return 0</code></pre><p><strong>代码实现</strong></p><pre><code class="java">//设置static，在类初始化就加载脚本，不必之后每次使用时重复加载脚本private static final DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT; //Redis脚本static {    UNLOCK_SCRIPT = new DefaultRedisScript&lt;&gt;();    //设置脚本存放位置    UNLOCK_SCRIPT.setLocation(new ClassPathResource(&quot;unlock.lua&quot;));    //设置脚本返回值类型    UNLOCK_SCRIPT.setResultType(Long.class);}public void unlock() {    // 调用lua脚本    stringRedisTemplate.execute(        UNLOCK_SCRIPT,        Collections.singletonList(KEY_PREFIX + name),        ID_PREFIX + Thread.currentThread().getId());}// 经过以上代码改造后，我们就能够实现 拿锁比锁删锁的原子性动作了~</code></pre><h1 id="五、分布式锁（Redission）"><a href="#五、分布式锁（Redission）" class="headerlink" title="五、分布式锁（Redission）"></a>五、分布式锁（Redission）</h1><p>基于setnx实现的分布式锁存在下面的问题：<br><strong>重入问题</strong>：重入问题是指 获得锁的线程可以再次进入到相同的锁的代码块中，可重入锁的意义在于防止死锁，比如HashTable这样的代码中，他的方法都是使用synchronized修饰的，假如他在一个方法内，调用另一个方法，那么此时如果是不可重入的，不就死锁了吗？所以可重入锁他的主要意义是防止死锁，我们的synchronized和Lock锁都是可重入的。<br><strong>不可重试</strong>：是指目前的分布式只能尝试一次，我们认为合理的情况是：当线程在获得锁失败后，他应该能再次尝试获得锁。<br><strong>超时释放：</strong>我们在加锁时增加了过期时间，这样的我们可以防止死锁，但是如果卡顿的时间超长，虽然我们采用了lua表达式防止删锁的时候，误删别人的锁，但是毕竟没有锁住，有安全隐患<br><strong>主从一致性：</strong> 如果Redis提供了主从集群，当我们向集群写数据时，主机需要异步的将数据同步给从机，而万一在同步过去之前，主机宕机了，就会出现死锁问题。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691918386005-3eb25723-66ca-4c19-8571-ebc4251c050c.png" alt="image.png"><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691996038304-724a201b-4ebe-4466-9e53-653c135d151b.png" alt="image.png"></p><h2 id="Redisson可重入锁原理"><a href="#Redisson可重入锁原理" class="headerlink" title="Redisson可重入锁原理"></a>Redisson可重入锁原理</h2><p>Redission可重入锁的设计思想和Reentranlock相似，通过value值来记录当前锁的重入次数。在分布式锁中，采用hash结构来存储锁，大key表示这把锁是否存在，小key指向持有锁的线程，value指向当前被重入的次数。因此当一个线程想持有锁时，它首先判断该锁是否存在，如果不存在，则获取锁，并在hash结构中添加key\value。如果线程中有另一个方法仍然想获取该锁，则首先判断是否指向同一个线程id，如果是，则vlaue值+1。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691927280479-720af33d-b124-4d99-9b6e-a259544d1f10.png" alt="image.png"><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691927409677-d8ebd8dc-7458-4c5a-b267-801e47c40d6c.png" alt="image.png"><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691927475165-b981fcd7-8d30-40e1-9076-217cb5588941.png" alt="image.png"><br>和Redisson实现可重入锁的逻辑一样，同样是通过哈希+lua脚本来实现的。</p><h2 id="Redisson锁重试及超时释放"><a href="#Redisson锁重试及超时释放" class="headerlink" title="Redisson锁重试及超时释放"></a>Redisson锁重试及超时释放</h2><h2 id="Redisson解决主从一致性（联锁multiLock）"><a href="#Redisson解决主从一致性（联锁multiLock）" class="headerlink" title="Redisson解决主从一致性（联锁multiLock）"></a>Redisson解决主从一致性（联锁multiLock）</h2><blockquote><p>问题引入：Redis的主节点执行了SETNX操作后，该命令还未同步到从节点，主节点就已经宕机。此时Redis通过哨兵模式选取一个新的从节点作为主节点，但是新主节点执行相同的SETNX后返回1，导致有两个线程同时获得了锁，出现并发安全问题。</p></blockquote><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691996404331-20d26caa-a176-4322-b5bd-db2826068206.png" alt="image.png"><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691996440342-9d9ff998-35d0-4866-82fb-ab74b068559e.png" alt="image.png"></p><blockquote><p>Redisson是如何解决这个问题的？</p></blockquote><p>既然主从节点模式下，主从节点会出现数据不一致型的问题。因此Redis设置多个结点，并把每个结点都作为一个独立的结点，即可进行写也可进行读。如果一个线程要获取锁，那么它在多个结点下同时获得锁成功才算成功，只要有一个结点没有成功，那么就会获取锁失败。如果想提高可用性，可以为每个结点，再配置从节点。如果此时有一个主节点宕机，且锁数据还未同步到从节点，当一个线程要获取该锁时，尽管在该从节点设置SETNX返回1，但其他两个结点设置SETNX均返回0，因此即使从节点还未同步锁数据，由于这种机制，仍然保证了多线程下的并发安全问题。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691996763654-542e6a83-9e18-43ae-8ed5-f15b0ad5ac55.png" alt="image.png"><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691996778424-a1f9851a-7d64-48ef-ab9e-f5f682ab6e01.png" alt="image.png"></p><h1 id="六、秒杀优化"><a href="#六、秒杀优化" class="headerlink" title="六、秒杀优化"></a>六、秒杀优化</h1><p><strong>对目前优惠券系统进行并发测试（模拟1000个用户同时下单）</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691997722433-af03e4c9-dbfb-42f6-b8d8-e7c7d656d7a0.png" alt="image.png"><br><strong>平均响应时间达到497ms（业务耗时较长）</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691997756814-1200b8eb-7386-43f8-99d8-923c7635be3c.png" alt="image.png"></p><blockquote><p>分析业务执行时间较长的原因</p></blockquote><p>秒杀业务进行各操作是一个串行的执行过程，并且在执行过程中会去数据库中查询或者执行写操作，相对较为耗时。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691997880859-1f4d77fa-62dc-480a-ac3f-8ad3c1acc7d2.png" alt="image.png"></p><blockquote><p>如何进行优化？（提高并发能力、减轻数据库压力）</p></blockquote><p>将查询优惠券库存、判断库存是否充足以及查询订单、校验一人一单的工作与减库存、创建订单的工作分离开，开启两个独立的线程去分别完成两个工作。<br>将耗时比较短的逻辑判断放入到redis中，比如是否库存足够，比如是否一人一单，这样的操作，只要这种逻辑可以完成，就意味着我们是一定可以下单完成的，我们只需要进行快速的逻辑判断，根本就不用等下单逻辑走完，我们直接给用户返回成功， 再在后台开一个线程，后台线程慢慢的去执行queue里边的消息，这样程序不就超级快了吗？而且也不用担心线程池消耗殆尽的问题，因为这里我们的程序中并没有手动使用任何线程池，当然这里边有两个难点<br><strong>第一个难点</strong>是我们怎么在redis中去快速校验一人一单，还有库存判断<br><strong>第二个难点</strong>是由于我们校验和tomcat下单是两个线程，那么我们如何知道到底哪个单他最后是否成功，或者是下单完成，为了完成这件事我们在redis操作完之后，我们会将一些信息返回给前端，同时也会把这些信息丢到异步queue中去，后续操作中，可以通过这个id来查询我们tomcat中的下单逻辑是否完成了。<br><strong>实现思路：</strong><br>Redis存储数据的结构<br><strong>库存数据：</strong>key: 库存id，value:库存数量<br><strong>一人一单数据：</strong>key：库存id，value：保存用户id的set集合。为了在Redis中校验一人一单的逻辑，因此只要一个用户下单成功，就把这个用户id放入到一个set集合中。后续用户想继续下单时，如果判断set中有这个值，就判断已经下过单。<br>当用户下单之后，判断库存是否充足只需要导redis中去根据key找对应的value是否大于0即可，如果不充足，则直接结束，如果充足，继续在redis中判断用户是否可以下单，如果set集合中没有这条数据，说明他可以下单，如果set集合中没有这条记录，则将userId和优惠卷存入到redis中，并且返回0，整个过程需要保证是原子性的，可以使用lua来操作。当以上判断逻辑走完之后，我们可以判断当前redis中返回的结果是否是0 ，如果是0，则表示可以下单，则将之前说的信息存入到到queue中去，然后返回，然后再来个线程异步的下单，前端可以通过返回的订单id来判断是否下单成功。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691998781170-db61aafd-3cb8-4b0c-9a79-9db00f33b1cc.png" alt="image.png"><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1691998807723-d3375d08-df48-4b38-a249-7a93d86bc1dc.png" alt="image.png"></p><h2 id="改进业务1（基于JDK阻塞队列实现秒杀）"><a href="#改进业务1（基于JDK阻塞队列实现秒杀）" class="headerlink" title="改进业务1（基于JDK阻塞队列实现秒杀）"></a>改进业务1（基于JDK阻塞队列实现秒杀）</h2><p>需求：</p><ul><li>新增秒杀优惠券的同时，将优惠券信息保存到Redis中</li><li>基于Lua脚本，判断秒杀库存、一人一单，决定用户是否抢购成功</li><li>如果抢购成功，将优惠券id和用户id封装后存入阻塞队列</li><li>开启线程任务，不断从阻塞队列中获取信息，实现异步下单功能</li></ul><blockquote><p>问题：保存优惠券库存信息到Redis中时，需要设置过期时间吗？</p></blockquote><p>不需要，优惠券设置了秒杀开始时间与结束时间，当结束时间到了，添加删除优惠券的逻辑。如果删除逻辑失败，由于Redis有数据淘汰策略，由于这个优惠券下架后就不再会被使用，因此当Redis内存达到阈值之后，也会触发淘汰策略把它从Redis中淘汰掉。<br><strong>保存库存信息到Redis中</strong></p><pre><code class="java">@Override@Transactionalpublic void addSeckillVoucher(Voucher voucher) {    // 保存优惠券    save(voucher);    // 保存秒杀信息    SeckillVoucher seckillVoucher = new SeckillVoucher();    seckillVoucher.setVoucherId(voucher.getId());    seckillVoucher.setStock(voucher.getStock());    seckillVoucher.setBeginTime(voucher.getBeginTime());    seckillVoucher.setEndTime(voucher.getEndTime());    seckillVoucherService.save(seckillVoucher);    // 保存秒杀库存到Redis中    //SECKILL_STOCK_KEY 这个变量定义在RedisConstans中    //private static final String SECKILL_STOCK_KEY =&quot;seckill:stock:&quot;    stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(), voucher.getStock().toString());}</code></pre><p><strong>完整lua表达式</strong></p><pre><code class="lua">-- 1.参数列表-- 1.1.优惠券idlocal voucherId = ARGV[1]-- 1.2.用户idlocal userId = ARGV[2]-- 1.3.订单idlocal orderId = ARGV[3]-- 2.数据key-- 2.1.库存keylocal stockKey = &#39;seckill:stock:&#39; .. voucherId-- 2.2.订单keylocal orderKey = &#39;seckill:order:&#39; .. voucherId-- 3.脚本业务-- 3.1.判断库存是否充足 get stockKeyif(tonumber(redis.call(&#39;get&#39;, stockKey)) &lt;= 0) then  -- 3.2.库存不足，返回1  return 1end-- 3.2.判断用户是否下单 SISMEMBER orderKey userIdif(redis.call(&#39;sismember&#39;, orderKey, userId) == 1) then  -- 3.3.存在，说明是重复下单，返回2  return 2end-- 3.4.扣库存 incrby stockKey -1redis.call(&#39;incrby&#39;, stockKey, -1)-- 3.5.下单（保存用户）sadd orderKey userIdredis.call(&#39;sadd&#39;, orderKey, userId)-- 3.6.发送消息到队列中， XADD stream.orders * k1 v1 k2 v2 ...redis.call(&#39;xadd&#39;, &#39;stream.orders&#39;, &#39;*&#39;, &#39;userId&#39;, userId, &#39;voucherId&#39;, voucherId, &#39;id&#39;, orderId)return 0</code></pre><pre><code class="java">//异步处理线程池private static final ExecutorService SECKILL_ORDER_EXECUTOR = Executors.newSingleThreadExecutor();//在类初始化之后执行，因为当这个类初始化好了之后，随时都是有可能要执行的@PostConstructprivate void init() {   SECKILL_ORDER_EXECUTOR.submit(new VoucherOrderHandler());}// 用于线程池处理的任务// 当初始化完毕后，就会去从对列中去拿信息 private class VoucherOrderHandler implements Runnable{        @Override        public void run() {            while (true){                try {                    // 1.获取队列中的订单信息                    VoucherOrder voucherOrder = orderTasks.take();                    // 2.创建订单                    handleVoucherOrder(voucherOrder);                } catch (Exception e) {                    log.error(&quot;处理订单异常&quot;, e);                }             }        }       private void handleVoucherOrder(VoucherOrder voucherOrder) {            //1.获取用户            Long userId = voucherOrder.getUserId();            // 2.创建锁对象            RLock redisLock = redissonClient.getLock(&quot;lock:order:&quot; + userId);            // 3.尝试获取锁            boolean isLock = redisLock.lock();            // 4.判断是否获得锁成功            if (!isLock) {                // 获取锁失败，直接返回失败或者重试                log.error(&quot;不允许重复下单！&quot;);                return;            }            try {        //注意：由于是spring的事务是放在threadLocal中，此时的是多线程，事务会失效                proxy.createVoucherOrder(voucherOrder);            } finally {                // 释放锁                redisLock.unlock();            }    }     //a  private BlockingQueue&lt;VoucherOrder&gt; orderTasks =new  ArrayBlockingQueue&lt;&gt;(1024 * 1024);    @Override    public Result seckillVoucher(Long voucherId) {        Long userId = UserHolder.getUser().getId();        long orderId = redisIdWorker.nextId(&quot;order&quot;);        // 1.执行lua脚本        Long result = stringRedisTemplate.execute(                SECKILL_SCRIPT,                Collections.emptyList(),                voucherId.toString(), userId.toString(), String.valueOf(orderId)        );        int r = result.intValue();        // 2.判断结果是否为0        if (r != 0) {            // 2.1.不为0 ，代表没有购买资格            return Result.fail(r == 1 ? &quot;库存不足&quot; : &quot;不能重复下单&quot;);        }        VoucherOrder voucherOrder = new VoucherOrder();        // 2.3.订单id        long orderId = redisIdWorker.nextId(&quot;order&quot;);        voucherOrder.setId(orderId);        // 2.4.用户id        voucherOrder.setUserId(userId);        // 2.5.代金券id        voucherOrder.setVoucherId(voucherId);        // 2.6.放入阻塞队列        orderTasks.add(voucherOrder);        //3.获取代理对象         proxy = (IVoucherOrderService)AopContext.currentProxy();        //4.返回订单id        return Result.ok(orderId);    }      @Transactional    public  void createVoucherOrder(VoucherOrder voucherOrder) {        Long userId = voucherOrder.getUserId();        // 5.1.查询订单        int count = query().eq(&quot;user_id&quot;, userId).eq(&quot;voucher_id&quot;, voucherOrder.getVoucherId()).count();        // 5.2.判断是否存在        if (count &gt; 0) {            // 用户已经购买过了           log.error(&quot;用户已经购买过了&quot;);           return ;        }        // 6.扣减库存        boolean success = seckillVoucherService.update()                .setSql(&quot;stock = stock - 1&quot;) // set stock = stock - 1                .eq(&quot;voucher_id&quot;, voucherOrder.getVoucherId()).gt(&quot;stock&quot;, 0) // where id = ? and stock &gt; 0                .update();        if (!success) {            // 扣减失败            log.error(&quot;库存不足&quot;);            return ;        }        save(voucherOrder);    }</code></pre><blockquote><p>当前的秒杀业务还存在哪些问题？</p></blockquote><ol><li><strong>内存限制。</strong>当前的秒杀任务是基于jdk的阻塞队列实现，这个阻塞队列使用的JVM的内存，如果对阻塞队列不进行限制，那么高并发情况下会有很多订单对象创建并放到阻塞队列中，导致出现内存溢出的风险。因此创建阻塞队列时要为其设置一个长度上限，如果队列存满，那么新的订单就无法添加到队列中。</li><li><strong>数据安全（JVM内存没有持久化机制）。</strong>如果系统宕机导致存储到队列中的数据丢失，那么用户收到了下单成功消息，但数据库中却没有，导致了出现不一致的问题。</li></ol><h2 id="改进业务2（基于Redis消息队列实现秒杀）"><a href="#改进业务2（基于Redis消息队列实现秒杀）" class="headerlink" title="改进业务2（基于Redis消息队列实现秒杀）"></a>改进业务2（基于Redis消息队列实现秒杀）</h2><p>基于消息队列解决了上述两个问题。首先，消息队列独立于JVM之外，因此没有内存限制。另外，消息队列会对存放其中的消息进行持久化，如果消费者没有对消息进行确认，则消息在消息队列中一直存在。下一次再投递给消费者让消费者继续处理，直到消费者进行确认，才将此消息进行移除。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692002872587-8aab95d0-a24c-4554-808d-3dde32bea798.png" alt="image.png"></p><h3 id="基于Redis的list实现消息队列"><a href="#基于Redis的list实现消息队列" class="headerlink" title="基于Redis的list实现消息队列"></a>基于Redis的list实现消息队列</h3><p>Redis的list结构底层是通过双向链表实现的，因此限制生产者从一边push（LPUSH命令），而消费者从另一边pop（RPOP命令），即实现了消息队列的模型。另外，当消息队列中没有消息时，我们希望处于阻塞状态，因此可以使用List的BLPOP、BRPOP命令，当list中无消息时，便会处于阻塞等待的状态。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692003303374-5670d572-69ee-4896-9488-c5095dd63fc7.png" alt="image.png"></p><blockquote><p>基于List的消息队列有哪些优缺点？</p></blockquote><p>优点：</p><ul><li>利用Redis存储，不受限于JVM内存上限</li><li>基于Redis的持久化机制，数据安全性有保证</li><li>可以满足消息有序性</li></ul><p>缺点：</p><ul><li>无法避免消息丢失（执行完BRPOP之后，就把消息从list中移除，因此从list取出消息后如果出现了异常，消息就会丢失了）</li><li>只支持单消费者（拿出消息后就从队列中移除，其他消费者拿不到消息）</li></ul><h3 id="基于Redis的PubSub实现消息队列"><a href="#基于Redis的PubSub实现消息队列" class="headerlink" title="基于Redis的PubSub实现消息队列"></a>基于Redis的PubSub实现消息队列</h3><p>PubSub（发布订阅）是Redis2.0版本引入的消息传递模型。顾名思义，消费者可以订阅一个或多个channel，生产者向对应channel发送消息后，所有订阅者都能收到相关消息。<br>SUBSCRIBE channel [channel] ：订阅一个或多个频道 PUBLISH channel msg ：向一个频道发送消息 PSUBSCRIBE pattern[pattern] ：订阅与pattern格式匹配的所有频道<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692003967273-1cfb2094-88cf-4b05-a472-5d89906d8e61.png" alt="image.png"><br>基于PubSub的消息队列有哪些优缺点？优点：</p><ul><li>采用发布订阅模型，支持多生产、多消费</li></ul><p>缺点：</p><ul><li>不支持数据持久化（Redis的数据是有持久化机制，但PubSub是另一种发布订阅模型，并不支持数据持久化）</li><li>无法避免消息丢失</li><li>消息堆积有上限，超出时数据丢失（消费者有缓存区域，如果处理一个消息时时间过久，其他消息到达后存储到缓存区中，缓存区满了后消息就会丢失）</li></ul><h3 id="基于Stream的消息队列"><a href="#基于Stream的消息队列" class="headerlink" title="基于Stream的消息队列"></a>基于Stream的消息队列</h3><p>Stream 是 Redis 5.0 引入的一种新<strong>数据类型（支持数据持久化）</strong>，可以实现一个功能非常完善的消息队列。</p><h4 id="单消费模式"><a href="#单消费模式" class="headerlink" title="单消费模式"></a>单消费模式</h4><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td>XADD</td><td>向队列中添加消息</td></tr><tr><td>XREAD</td><td>读取队列中的消息</td></tr><tr><td>XLEN</td><td>读取队列中消息的长度</td></tr></tbody></table><p>发送消息的命令：<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692007946690-ce1c084f-a7e3-4136-a6d5-326504eb627b.png" alt="image.png"><br>例如：<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692007952291-5b04ed5c-039b-4f02-8dca-3c69fa3734db.png" alt="image.png"><br>读取消息的方式之一：XREAD<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692007957378-e264f019-5948-45a6-b372-1092aa555314.png" alt="image.png"><br>例如，使用XREAD读取第一个消息：<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692007966804-4d1df85d-e58d-43d7-95f0-548daa89af06.png" alt="image.png"><br>XREAD阻塞方式，读取最新的消息：<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692007974186-5cbeb2b9-3f61-439e-8181-097de8c9fe7e.png" alt="image.png"><br><strong>添加到Strem队列中的消息可以被多个消费者读取，不会出现其他消费者读了之后，消息就从队列中丢失掉的情况。</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692254234462-53bc4aee-b952-4ea2-81f5-41a4c1973b79.png" alt="image.png"><br>在业务开发中，我们可以循环的调用XREAD阻塞方式来查询最新消息，从而实现持续监听队列的效果，伪代码如下<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692007985689-ace6fa77-4b98-4e79-a8aa-8b942c0decb8.png" alt="image.png"></p><blockquote><p>上述的队列实现存在什么问题？</p></blockquote><p>消息漏读。我们指定起始ID为$时，代表读取最新的消息，如果我们处理一条消息的过程中，又有超过1条以上的消息到达队列，则下次获取时也只能获取到最新的一条，会出现漏读消息的问题。<br><strong>STREAM类型消息队列的XREAD命令特点：</strong></p><ul><li>消息可回溯（消息添加到队列后不会消失，可回看）</li><li>一个消息可以被多个消费者读取</li><li>可以阻塞读取</li><li>有消息漏读的风险</li></ul><h4 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h4><blockquote><h4 id="单消费和消费者组模式有什么区别？"><a href="#单消费和消费者组模式有什么区别？" class="headerlink" title="单消费和消费者组模式有什么区别？"></a>单消费和消费者组模式有什么区别？</h4></blockquote><p>消费者组是将多个消费者划分到一个组中，监听同一个队列。用来解决消息漏读的问题。<br><strong>特点：</strong></p><ol><li><strong>消息分流。</strong>队列中的消息会被分到组内的不同消费者，加快了消息处理的速度，避免出现消息堆积的情况。</li><li><strong>消息标示。</strong>消费者组中维护了一个记录最后一个被处理的消息的标识，通过该标识，可以确保每个消息都会被消费， 避免出现消息漏读的情况。</li><li><strong>消息确认。</strong>消费者获取消息之后，消息会处于pending状态，并且处于pending状态的消息会存入到pending-list中。如果消息处理完毕，需要XACK确认消息，标记消息已被处理，并会从pendinglist中移除。该机制确保了消息至少会被消费一次。如果Redis宕机，在恢复后可以到pending-list中找到还未完成处理的消息，继续处理。</li></ol><p><strong>基本命令</strong><br><strong>创建消费者组</strong></p><pre><code class="java">XGROUP CREAT key groupName ID [MKSTREAM]</code></pre><p><strong>删除指定的消费者组</strong></p><pre><code class="java">XGROUP DESTORY key groupName</code></pre><p><strong>给指定的消费者组添加消费者</strong></p><pre><code class="java">XGROUP CREATECONSUMER key groupname consumername</code></pre><p><strong>删除消费者组中的指定消费者</strong></p><pre><code class="java">XGROUP DELCONSUMER key groupname consumername</code></pre><p><strong>从消费者组读取消息</strong></p><pre><code class="java">XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...]</code></pre><ul><li>group：消费组名称</li><li>consumer：消费者名称，如果消费者不存在，会自动创建一个消费者</li><li>count：本次查询的最大数量</li><li>BLOCK milliseconds：当没有消息时最长等待时间</li><li>NOACK：无需手动ACK，消息投递到消费者后会自动确认</li><li>STREAMS key：指定队列名称</li><li>ID：获取消息的起始ID：<ul><li>“&gt;”：从下一个未消费的消息开始（正常情况下读未消费的消息）</li><li>其它：根据指定id从pending-list中获取已消费但未确认的消息，例如0，是从pending-list中的第一个消息开始（出现异常时，从pending-list中读取已消费但未处理成功的消息）</li></ul></li></ul><p><strong>确认消息</strong></p><pre><code class="java">XACK key group ID [ID ...]</code></pre><p><strong>消费者组监听消息思路（确保消息至少会被消费一次）：</strong><br>正常情况下，由消费者组来监听队列中未被消费的消息；如果监听过程中出现了异常，则在捕获异常的处理逻辑中去处理已消费但还未确认的消息，当这些未确认的消息处理完毕后，再监听未被消费的消息。<br><strong>代码实现</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692256791855-d6eee032-6e5e-45ef-a7d8-16bd77d13d9b.png" alt="image.png"><br>STREAM类型消息队列的XREADGROUP命令特点：</p><ul><li>消息可回溯</li><li>可以多消费者争抢消息，加快消费速度</li><li>可以阻塞读取</li><li>没有消息漏读的风险（有最后一次被处理消息的标识，每次读取时，可从上一次消费消息后的一条消息读取）</li><li>有消息确认机制，保证消息至少被消费一次</li></ul><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692257280587-6c1c8550-6d74-4d4a-8042-ee20101f650d.png" alt="image.png"></p><blockquote><p>使用Stream队列还存在什么缺点？</p></blockquote><ol><li>依赖于Redis持久化，仍然存在消息丢失的风险</li><li>Stream只支持消费者确认，并不支持生产者确认，因此如果生产者消息丢失，还需要考虑如何解决</li></ol><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692258928313-d557834b-c642-4227-a616-b482895a870c.png" alt="image.png"><br><strong>具体思路：</strong><br>在redis里进行库存判断+一人一单判断后，将库存id、用户id、订单id发送到消息队列中，完成后判断是否可以下单成功，如果可以，则直接返回数据。然后开启另外一个线程完成异步下单的功能。在进行异步下单时，开启的线程一直监听队列中的消息。如果监听到消息，则执行处理，并返回对该消息的确认。如果发生了异常，则要处理已消费但未确认的消息。<br><strong>lua脚本</strong></p><pre><code class="java">-- 1.参数列表-- 1.1.优惠券idlocal voucherId = ARGV[1]-- 1.2.用户idlocal userId = ARGV[2]-- 1.3.订单idlocal orderId = ARGV[3]-- 2.数据key-- 2.1.库存keylocal stockKey = &#39;seckill:stock:&#39; .. voucherId-- 2.2.订单keylocal orderKey = &#39;seckill:order:&#39; .. voucherId-- 3.脚本业务-- 3.1.判断库存是否充足 get stockKeyif(tonumber(redis.call(&#39;get&#39;, stockKey)) &lt;= 0) then  -- 3.2.库存不足，返回1  return 1end-- 3.2.判断用户是否下单 SISMEMBER orderKey userIdif(redis.call(&#39;sismember&#39;, orderKey, userId) == 1) then  -- 3.3.存在，说明是重复下单，返回2  return 2end-- 3.4.扣库存 incrby stockKey -1redis.call(&#39;incrby&#39;, stockKey, -1)-- 3.5.下单（保存用户）sadd orderKey userIdredis.call(&#39;sadd&#39;, orderKey, userId)-- 3.6.发送消息到队列中， XADD stream.orders * k1 v1 k2 v2 ...redis.call(&#39;xadd&#39;, &#39;stream.orders&#39;, &#39;*&#39;, &#39;userId&#39;, userId, &#39;voucherId&#39;, voucherId, &#39;id&#39;, orderId)return 0</code></pre><p><strong>VoucherOrderServiceImpl</strong></p><pre><code class="java">private class VoucherOrderHandler implements Runnable {    @Override    public void run() {        while (true) {            try {                // 1.获取消息队列中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt;                List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(                    Consumer.from(&quot;g1&quot;, &quot;c1&quot;),                    StreamReadOptions.empty().count(1).block(Duration.ofSeconds(2)),                    StreamOffset.create(&quot;stream.orders&quot;, ReadOffset.lastConsumed())                );                // 2.判断订单信息是否为空                if (list == null || list.isEmpty()) {                    // 如果为null，说明没有消息，继续下一次循环                    continue;                }                // 解析数据                MapRecord&lt;String, Object, Object&gt; record = list.get(0);                Map&lt;Object, Object&gt; value = record.getValue();                VoucherOrder voucherOrder = BeanUtil.fillBeanWithMap(value, new VoucherOrder(), true);                // 3.创建订单                createVoucherOrder(voucherOrder);                // 4.确认消息 XACK                stringRedisTemplate.opsForStream().acknowledge(&quot;s1&quot;, &quot;g1&quot;, record.getId());            } catch (Exception e) {                log.error(&quot;处理订单异常&quot;, e);                //处理异常消息                handlePendingList();            }        }    }    private void handlePendingList() {        while (true) {            try {                // 1.获取pending-list中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 0                List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(                    Consumer.from(&quot;g1&quot;, &quot;c1&quot;),                    StreamReadOptions.empty().count(1),                    StreamOffset.create(&quot;stream.orders&quot;, ReadOffset.from(&quot;0&quot;))                );                // 2.判断订单信息是否为空                if (list == null || list.isEmpty()) {                    // 如果为null，说明没有异常消息，结束循环                    break;                }                // 解析数据                MapRecord&lt;String, Object, Object&gt; record = list.get(0);                Map&lt;Object, Object&gt; value = record.getValue();                VoucherOrder voucherOrder = BeanUtil.fillBeanWithMap(value, new VoucherOrder(), true);                // 3.创建订单                createVoucherOrder(voucherOrder);                // 4.确认消息 XACK                stringRedisTemplate.opsForStream().acknowledge(&quot;s1&quot;, &quot;g1&quot;, record.getId());            } catch (Exception e) {                log.error(&quot;处理pendding订单异常&quot;, e);                try{                    Thread.sleep(20);                }catch(Exception e){                    e.printStackTrace();                }            }        }    }    public Result seckillVoucher(Long voucherId) {        Long userId = UserHolder.getUser().getId();        long orderId = redisIdWorker.nextId(&quot;order&quot;);        // 1.执行lua脚本        Long result = stringRedisTemplate.execute(                SECKILL_SCRIPT,                Collections.emptyList(),                voucherId.toString(), userId.toString(), String.valueOf(orderId)        );        int r = result.intValue();        // 2.判断结果是否为0        if (r != 0) {            // 2.1.不为0 ，代表没有购买资格            return Result.fail(r == 1 ? &quot;库存不足&quot; : &quot;不能重复下单&quot;);        }        // 3.返回订单id        return Result.ok(orderId);    }}</code></pre><p><strong>并发测试</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692261304330-ceaae2cf-0685-4518-8c34-83df49266c69.png" alt="image.png"><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692261319614-ffd522f4-e61f-45c6-a0f2-b24032f009bd.png" alt="image.png"></p><h1 id="七、达人探店"><a href="#七、达人探店" class="headerlink" title="七、达人探店"></a>七、达人探店</h1><p><strong>数据表</strong><br><strong>tb_blog（探店笔记表）</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692269255815-9ffb9cfa-a8fb-4e10-948a-0e1aaed711f1.png" alt="image.png"><br><strong>tb_blog_comments</strong></p><table><thead><tr><th>接口</th><th>介绍</th><th>返回值</th></tr></thead><tbody><tr><td>/blog</td><td>发布探店笔记接口</td><td></td></tr><tr><td>/blog/{id}</td><td>查看探店笔记接口</td><td>笔记信息+用户信息</td></tr><tr><td>/blog/like/id</td><td>点赞探店笔记接口</td><td></td></tr><tr><td>/blog/likes/{id}</td><td>点赞探店笔记列表接口</td></tr></tbody></table><h2 id="发布探店笔记"><a href="#发布探店笔记" class="headerlink" title="发布探店笔记"></a>发布探店笔记</h2><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692269512242-ad304109-3700-46c9-8954-542cea1eac37.png" alt="image.png"><br>上传照片和发布图文是两个不同的接口，用户需要上传图片时调用上传图片的接口，然后接口会返回图片的名称信息。后面调用发布笔记的接口时，会把图片的名称传到接口中。</p><h2 id="查看探店笔记"><a href="#查看探店笔记" class="headerlink" title="查看探店笔记"></a>查看探店笔记</h2><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692270253997-9e3f7b72-a914-433f-8e55-fda93f2bbea3.png" alt="image.png"></p><h2 id="点赞探店笔记"><a href="#点赞探店笔记" class="headerlink" title="点赞探店笔记"></a>点赞探店笔记</h2><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692270479494-8ef36dec-3b43-4396-8b63-f2930fe46eb4.png" alt="image.png"></p><h3 id="实现1"><a href="#实现1" class="headerlink" title="实现1"></a>实现1</h3><pre><code class="java">@GetMapping(&quot;/likes/{id}&quot;)public Result queryBlogLikes(@PathVariable(&quot;id&quot;) Long id) {    //修改点赞数量    blogService.update().setSql(&quot;liked = liked +1 &quot;).eq(&quot;id&quot;,id).update();    return Result.ok();}</code></pre><blockquote><p>问题：没有对点赞量进行限制，一个用户可以为同一篇探店笔记点多个赞</p></blockquote><h3 id="实现2"><a href="#实现2" class="headerlink" title="实现2"></a>实现2</h3><p><strong>需求</strong>：</p><ul><li>同一个用户只能点赞一次，再次点击则取消点赞</li><li>如果当前用户已经点赞，则点赞按钮高亮显示（前端已实现，判断字段Blog类的isLike属性）</li></ul><p><strong>实现步骤：</strong></p><ul><li>给Blog类中添加一个isLike字段，标示是否被当前用户点赞</li><li>修改点赞功能，利用Redis的set集合判断是否点赞过，未点赞过则点赞数+1，已点赞过则点赞数-1</li><li>修改根据id查询Blog的业务，判断当前登录用户是否点赞过，赋值给isLike字段</li><li>修改分页查询Blog业务，判断当前登录用户是否点赞过，赋值给isLike字段</li></ul><blockquote><p>判断用户是否点过赞的思路有哪些？</p></blockquote><ol><li>建立一个点赞表，里面包括Blog ID以及User ID，当要判断当前用户是否点过赞，则根据Blog ID和User ID到数据库中去查询。（数据库压力大、直接访问数据库，导致性能低）</li><li>使用Redis的set集合</li></ol><p><strong>代码实现：</strong></p><ol><li>在Blog中添加isLike字段</li></ol><pre><code class="java">@TableField(exist = false)private Boolean isLike;</code></pre><ol start="2"><li>修改代码</li></ol><pre><code class="java">@Overridepublic Result likeBlog(Long id){    // 1.获取登录用户    Long userId = UserHolder.getUser().getId();    // 2.判断当前登录用户是否已经点赞    String key = BLOG_LIKED_KEY + id;    Boolean isMember = stringRedisTemplate.opsForSet().isMember(key, userId.toString());    if(BooleanUtil.isFalse(isMember)){         //3.如果未点赞，可以点赞        //3.1 数据库点赞数+1        boolean isSuccess = update().setSql(&quot;liked = liked + 1&quot;).eq(&quot;id&quot;, id).update();        //3.2 保存用户到Redis的set集合        if(isSuccess){            stringRedisTemplate.opsForSet().add(key,userId.toString());        }    }else{         //4.如果已点赞，取消点赞        //4.1 数据库点赞数-1        boolean isSuccess = update().setSql(&quot;liked = liked - 1&quot;).eq(&quot;id&quot;, id).update();        //4.2 把用户从Redis的set集合移除        if(isSuccess){            stringRedisTemplate.opsForSet().remove(key,userId.toString());        }    }</code></pre><h2 id="点赞排行榜-越早越靠前"><a href="#点赞排行榜-越早越靠前" class="headerlink" title="点赞排行榜(越早越靠前)"></a>点赞排行榜(越早越靠前)</h2><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692272447657-536b940c-4c64-4dec-b93d-f9175b26f912.png" alt="image.png"></p><blockquote><p>思考：点赞的信息都保存在了Redis中，那Redis宕机了，点赞信息丢失了怎么办？（Redis数据持久化）</p></blockquote><p>可以隔一定时间就将Redis中的数据持久化到磁盘文件中，防止Redis宕机数据全部丢失。<br>Redis中提供save以及bgsave指令来生成RDB文件，二者的主要区别是生成RDB文件的任务是否是交由主线程来执行。</p><ul><li>执行了 save 命令，就会在主线程生成 RDB 文件，由于和执行操作命令在同一个线程，所以如果写入 RDB 文件的时间太长，<strong>会阻塞主线程</strong>；</li><li>执行了 bgsave 命令，会创建一个子进程来生成 RDB 文件，这样可以<strong>避免主线程的阻塞</strong>；</li></ul><p>另外，还可以通过在配置文件中配置，让Redis每个一段时间自动执行一次bgsave指令</p><pre><code class="java">save 900 1save 300 10save 60 10000// 只要满足上面条件的任意一个，就会执行 bgsave，它们的意思分别是：// 900 秒之内，对数据库进行了至少 1 次修改；// 300 秒之内，对数据库进行了至少 10 次修改；// 60 秒之内，对数据库进行了至少 10000 次修改。</code></pre><p>通常可能设置至少 5 分钟才保存一次快照，这时如果 Redis 出现宕机等情况，则意味着最多可能丢失 5 分钟数据。<br>这就是 RDB 快照的缺点，在服务器发生故障时，丢失的数据会比 AOF 持久化的方式更多，因为 RDB 快照是全量快照的方式，因此执行的频率不能太频繁，否则会影响 Redis 性能，而 AOF 日志可以以秒级的方式记录操作命令，所以丢失的数据就相对更少。</p><hr><p><strong>对于Redis中可以用做点赞列表的数据类型分析</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1692954953427-848b6651-b9c2-4def-b267-08eb43734708.png" alt="image.png"><br>List底层是链表，因此如果向List中通过RPUSH添加点赞用户，通过LINDEX获取列表头部元素，就实现了点赞列表排序功能。但LIst元素不保证唯一，且由于底层是链表，因此只能通过索引获取元素。如果想通过元素进行查找，那需要遍历链表。因此List并不适合用作点赞列表。<br>Set和SortedSet底层是哈希表，它们可以根据元素来快速定位到指定位置。由于SortedSet会为每一个元素关联一个分数，因此如果要实现排序功能的话，需要使用SortedSet。由于业务中想显示点赞时间最靠前的五位用户，因此可以用时间戳作为分数（时间戳天然升序）。</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>ZSCORE key member</td><td>获取指定元素的score，元素存在返回score，元素不存在返回nil</td></tr><tr><td>ZRANGE key min max</td><td>返回SortedSet中指定区间内的成员，其中成员按从小到大排序</td></tr></tbody></table><hr><h3 id="修改业务代码1"><a href="#修改业务代码1" class="headerlink" title="修改业务代码1"></a>修改业务代码1</h3><p><strong>点赞代码（将Set替换为ZSet，由于ZSet中没有isMember指令，因此需要使用ZSCORE指令来判断用户是否存在）</strong></p><pre><code class="java">@Overridepublic Result likeBlog(Long id) {    // 1.获取登录用户    Long userId = UserHolder.getUser().getId();    // 2.判断当前登录用户是否已经点赞    String key = BLOG_LIKED_KEY + id;    Double score = stringRedisTemplate.opsForZSet().score(key, userId.toString());    if (score == null) {        // 3.如果未点赞，可以点赞        // 3.1.数据库点赞数 + 1        boolean isSuccess = update().setSql(&quot;liked = liked + 1&quot;).eq(&quot;id&quot;, id).update();        // 3.2.保存用户到Redis的set集合  zadd key value score        if (isSuccess) {            stringRedisTemplate.opsForZSet().add(key, userId.toString(), System.currentTimeMillis());        }    } else {        // 4.如果已点赞，取消点赞        // 4.1.数据库点赞数 -1        boolean isSuccess = update().setSql(&quot;liked = liked - 1&quot;).eq(&quot;id&quot;, id).update();        // 4.2.把用户从Redis的set集合移除        if (isSuccess) {            stringRedisTemplate.opsForZSet().remove(key, userId.toString());        }    }    return Result.ok();}private void isBlogLiked(Blog blog) {    // 1.获取登录用户    UserDTO user = UserHolder.getUser();    if (user == null) {        // 用户未登录，无需查询是否点赞        return;    }    Long userId = user.getId();    // 2.判断当前登录用户是否已经点赞    String key = &quot;blog:liked:&quot; + blog.getId();    Double score = stringRedisTemplate.opsForZSet().score(key, userId.toString());    blog.setIsLike(score != null);}</code></pre><p><strong>点赞列表查询代码</strong><br><strong>BlogController</strong></p><pre><code class="java">@GetMapping(&quot;/likes/{id}&quot;)public Result queryBlogLikes(@PathVariable(&quot;id&quot;) Long id) {    return blogService.queryBlogLikes(id);}</code></pre><p><strong>BlogService</strong></p><pre><code class="java">@Overridepublic Result queryBlogLikes(Long id) {    String key = BLOG_LIKED_KEY + id;    // 1.查询top5的点赞用户 zrange key 0 4    Set&lt;String&gt; top5 = stringRedisTemplate.opsForZSet().range(key, 0, 4);    if (top5 == null || top5.isEmpty()) {        return Result.ok(Collections.emptyList());    }    // 2.解析出其中的用户id    List&lt;Long&gt; ids = top5.stream().map(Long::valueOf).collect(Collectors.toList());    //select ... from tb_user where id in (?,?)  List&lt;UserDTO&gt; userDTOS = userService.listByIds(ids)        .stream()            .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))            .collect(Collectors.toList());    // 4.返回    return Result.ok(userDTOS);}</code></pre><h3 id="测试-点赞并未如预期的按照时间戳从小到大排列"><a href="#测试-点赞并未如预期的按照时间戳从小到大排列" class="headerlink" title="测试(点赞并未如预期的按照时间戳从小到大排列)"></a>测试(点赞并未如预期的按照时间戳从小到大排列)</h3><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693015693361-a53cc311-b8e7-45dd-b455-5eb4a0a57e5e.png" alt="image.png"><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693015722866-7034a768-d0a9-4428-a8b2-4d4e0ba70742.png" alt="image.png"><br><strong>预想结果：</strong>按时间戳由小到大进行排列，先点赞的在前，后点赞的在后，即点赞后蓝色头像排在黄色头像之后。<br><strong>分析原因：</strong></p><ol><li><p>**查看接口返回的响应信息</p><p>**<img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693015892992-33d922a0-12cc-40ab-a11e-a3c53b850781.png" alt="image.png">返回结果的顺序出现错误，当前登录用户为小鱼同学，小鱼同学点赞后应排在第二位，但实际上却排在了第一位。</p></li><li><p>**分析使用Mybatis进行查询时传入的参数是否正确</p><p><strong><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693016110242-57ccb91f-1fa5-4061-a708-eefb936ddd11.png" alt="image.png"></strong>传入的参数先5再1符合预期</p></li><li><p>**检查SQL语句（这里出现错误）</p><p><strong><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693016406931-800bc9b6-bbdf-43ca-8c6c-66ff8009aeed.png" alt="image.png"></strong>使用in查询，传入的顺序是5,1，但查出的顺序是1,5。</p></li><li><p>**解决：通过Order by filed</p><p><strong><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693016551060-7ea14c3a-bb92-40d9-b4f5-95790808dec0.png" alt="image.png"></strong>通过手动指定id的顺序来对其进行限制</p></li></ol><h3 id="修改业务代码2"><a href="#修改业务代码2" class="headerlink" title="修改业务代码2"></a>修改业务代码2</h3><pre><code class="java">@Overridepublic Result queryBlogLikes(Long id) {    String key = BLOG_LIKED_KEY + id;    // 1.查询top5的点赞用户 zrange key 0 4    Set&lt;String&gt; top5 = stringRedisTemplate.opsForZSet().range(key, 0, 4);    if (top5 == null || top5.isEmpty()) {        return Result.ok(Collections.emptyList());    }    // 2.解析出其中的用户id    List&lt;Long&gt; ids = top5.stream().map(Long::valueOf).collect(Collectors.toList());    String idStr = StrUtil.join(&quot;,&quot;, ids);  // 3.根据用户id查询用户 WHERE id IN ( 5 , 1 ) ORDER BY FIELD(id, 5, 1)    List&lt;UserDTO&gt; userDTOS = userService.query()            .in(&quot;id&quot;, ids).last(&quot;ORDER BY FIELD(id,&quot; + idStr + &quot;)&quot;).list()            .stream()            .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))            .collect(Collectors.toList());    // 4.返回    return Result.ok(userDTOS);}</code></pre><p><strong>结果</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693016786556-058a4d9b-cfbe-4ebc-a8bf-95a723d2142e.png" alt="image.png"></p><h1 id="八、好友关注"><a href="#八、好友关注" class="headerlink" title="八、好友关注"></a>八、好友关注</h1><p><strong>接口</strong></p><table><thead><tr><th>接口</th><th>描述</th><th>参数</th><th>响应</th></tr></thead><tbody><tr><td>/follow/1/true</td><td>关注/取关用户</td><td>1：被关注用户id</td><td></td></tr><tr><td>true：关注</td><td></td><td></td><td></td></tr><tr><td>false：取消关注</td><td></td><td></td><td></td></tr><tr><td>/follow/or/not/1</td><td>是否关注用户</td><td>1：被关注用户id</td><td>true：未关注要进行关注</td></tr><tr><td>false：已关注</td><td></td><td></td></tr></tbody></table><p><strong>数据表</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693017754549-b274b20b-09a4-4a73-846b-894381f92269.png" alt="image.png"></p><h2 id="关注和取关"><a href="#关注和取关" class="headerlink" title="关注和取关"></a>关注和取关</h2><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693017644968-59984e76-86ac-407f-b858-add319d75eef.png" alt="image.png"><br><strong>首先当点进博客时首先会判断当前登录用户是否关注了博主</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693018062537-ecb2bbea-6190-4efe-80aa-cdf2696f7723.png" alt="image.png"><br><strong>查询结果未关注，则前端按键会显示关注按钮</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693018086113-555ccfe8-ca55-4f6e-ace4-428c044717b1.png" alt="image.png"><br><strong>点击发起关注请求时，传参为true，表示要进行关注</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693018095946-4a6ba48f-268a-4aea-a4c6-782765df3feb.png" alt="image.png"></p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>FollowController</strong></p><pre><code class="java">//关注@PutMapping(&quot;/{id}/{isFollow}&quot;)public Result follow(@PathVariable(&quot;id&quot;) Long followUserId, @PathVariable(&quot;isFollow&quot;) Boolean isFollow) {    return followService.follow(followUserId, isFollow);}//取消关注@GetMapping(&quot;/or/not/{id}&quot;)public Result isFollow(@PathVariable(&quot;id&quot;) Long followUserId) {      return followService.isFollow(followUserId);}</code></pre><p><strong>FollowService</strong></p><pre><code class="java">// 取消关注service@Overridepublic Result isFollow(Long followUserId) {        // 1.获取登录用户        Long userId = UserHolder.getUser().getId();        // 2.查询是否关注 select count(*) from tb_follow where user_id = ? and follow_user_id = ?        Integer count = query().eq(&quot;user_id&quot;, userId).eq(&quot;follow_user_id&quot;, followUserId).count();        // 3.判断        return Result.ok(count &gt; 0);    } // 关注service @Override    public Result follow(Long followUserId, Boolean isFollow) {        // 1.获取登录用户        Long userId = UserHolder.getUser().getId();        String key = &quot;follows:&quot; + userId;        // 1.判断到底是关注还是取关        if (isFollow) {            // 2.关注，新增数据            Follow follow = new Follow();            follow.setUserId(userId);            follow.setFollowUserId(followUserId);            boolean isSuccess = save(follow);        } else {            // 3.取关，删除 delete from tb_follow where user_id = ? and follow_user_id = ?            remove(new QueryWrapper&lt;Follow&gt;()                    .eq(&quot;user_id&quot;, userId).eq(&quot;follow_user_id&quot;, followUserId));        }        return Result.ok();    }</code></pre><h2 id="共同关注"><a href="#共同关注" class="headerlink" title="共同关注"></a>共同关注</h2><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693019859468-ca3326dc-3f74-4b92-80c5-09d0ac338c93.png" alt="image.png"><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693024680026-c602d837-c272-4e82-8cff-179c916aa2f6.png" alt="image.png"><br><strong>分析：</strong>共同关注即找到了博主和登录用户关注列表的交集，在Redis中的set集合中有SINTER指令来得到多个key的交集。<br><strong>业务代码改进：</strong><br>由于之前在关注和取消时，只把数据保存到了数据库中，因此现在需要改进业务代码，把用户及用户关注以key（当前用户id），value(set)的形式保存至Redis中。</p><pre><code class="java">@Overridepublic Result follow(Long followUserId, Boolean isFollow) {    // 1.获取登录用户    Long userId = UserHolder.getUser().getId();    String key = &quot;follows:&quot; + userId;    // 1.判断到底是关注还是取关    if (isFollow) {        // 2.关注，新增数据        Follow follow = new Follow();        follow.setUserId(userId);        follow.setFollowUserId(followUserId);        boolean isSuccess = save(follow);        if (isSuccess) {            // 把关注用户的id，放入redis的set集合 sadd userId followerUserId            stringRedisTemplate.opsForSet().add(key, followUserId.toString());        }    } else {        // 3.取关，删除 delete from tb_follow where user_id = ? and follow_user_id = ?        boolean isSuccess = remove(new QueryWrapper&lt;Follow&gt;()                .eq(&quot;user_id&quot;, userId).eq(&quot;follow_user_id&quot;, followUserId));        if (isSuccess) {            // 把关注用户的id从Redis集合中移除            stringRedisTemplate.opsForSet().remove(key, followUserId.toString());        }    }    return Result.ok();}</code></pre><p>获取多个set集合的交集</p><pre><code class="java">@Overridepublic Result followCommons(Long id) {    // 1.获取当前用户    Long userId = UserHolder.getUser().getId();    String key = &quot;follows:&quot; + userId;    // 2.求交集    String key2 = &quot;follows:&quot; + id;    Set&lt;String&gt; intersect = stringRedisTemplate.opsForSet().intersect(key, key2);    if (intersect == null || intersect.isEmpty()) {        // 无交集        return Result.ok(Collections.emptyList());    }    // 3.解析id集合    List&lt;Long&gt; ids = intersect.stream().map(Long::valueOf).collect(Collectors.toList());    // 4.查询用户    List&lt;UserDTO&gt; users = userService.listByIds(ids)            .stream()            .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))            .collect(Collectors.toList());    return Result.ok(users);}</code></pre><p><strong>效果展示</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693024817575-d232fe4d-c8c1-4389-bc42-13c7fefb85b6.png" alt="image.png"></p><h2 id="关注推送（Feed流）"><a href="#关注推送（Feed流）" class="headerlink" title="关注推送（Feed流）"></a>关注推送（Feed流）</h2><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693028010874-799a6651-e9cb-49d4-a0c7-a6b2d1231bd0.png" alt="image.png"><br><strong>Feed流的实现有两种模式：</strong></p><ol><li><strong>Timeline：</strong>不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。例如朋友圈<br><strong>优点：</strong>信息全面，不会有缺失。并且实现也相对简单<br><strong>缺点：</strong>信息噪音较多，用户不一定感兴趣，内容获取效率低</li><li><strong>智能排序：</strong>利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户<br><strong>优点：</strong>投喂用户感兴趣信息，用户粘度很高，容易沉迷<br><strong>缺点：</strong>如果算法不精准，可能起到反作用</li></ol><p>本项目中的个人页面，是基于关注的好友来做Feed流，因此用Timeline的模式。该模式的实现方案有三种</p><ol><li><p>**拉模式</p><p><strong><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693030276953-2cf4e8cc-f978-4750-8f60-b151fdb8076e.png" alt="image.png"></strong>每个用户发了Blog之后，都会把消息存入到其对应的发件箱中。粉丝只有在浏览时才会把关注博主的Blog信息推送到自己的收件箱中。</p><p><strong>优点：</strong>节约空间，因为赵六在读信息时，并没有重复读取，而且读取完之后可以把他的收件箱进行清除。</p><p><strong>缺点：</strong>延迟，当用户读取数据时才去关注的人里边去读取数据，假设用户关注了大量的用户，那么此时就会拉取海量的内容，对服务器压力巨大。</p></li><li><strong>推模式</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693030561742-0c9261bc-0238-4d02-93d0-02a8a18836d3.png" alt="image.png">用户没有发件箱，只有收件箱。当用户发了消息之后，将消息推送到所有粉丝的收件箱中。<br><strong>优点：</strong>时效快，不用临时拉取。<br><strong>缺点：</strong>内存压力大，假设一个大V写信息，很多人关注他， 就会写很多数据到每个粉丝的收件箱中。</li><li><p>**推拉结合</p><p>**<img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693030810664-fc586a99-5f74-4d36-9e43-b137b6245733.png" alt="image.png">推拉模式将用户分为大V和普通用户，将粉丝分为活跃粉丝和普通粉丝。<br>对于普通用户来说，由于其粉丝数量较少，因此使用推模式，在发送消息时并没有使用发件箱，而是将消息直接发送到每个粉丝的收件箱中。<br>对于大V用户来说，其粉丝体量较大，但粉丝中绝大多数为普通粉丝，活跃粉丝占比较少。因此对于活跃粉丝采取推模式，而对于不经常上线的普通粉丝使用拉模式，只有粉丝上线需要浏览消息时才从大V的发件箱中拉去消息到粉丝的收件箱中。</p></li></ol><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693031124228-b90e91a6-7c2e-420a-9ccc-e3aa5bc6a72f.png" alt="image.png"></p><h3 id="业务分析"><a href="#业务分析" class="headerlink" title="业务分析"></a>业务分析</h3><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693035319883-2ba3e9d5-b883-44f2-9d39-be1e5ea071c7.png" alt="image.png"><br><strong>需求：</strong></p><ul><li>修改新增探店笔记的业务，在保存blog到数据库的同时，<strong>推送到粉丝的收件箱</strong></li><li>收件箱满足可以<strong>根据时间戳排序</strong>，必须用Redis的数据结构实现</li><li>查询收件箱数据时，可以实现<strong>分页查询</strong></li></ul><p>要求推送到收件箱的blog信息按照时间戳排序，那么Redis中的List和ZSet都能满足这个需求。要求查询收件箱数据时，可以实现分页查询。List底层是链表，因此是有角标的。可以通过List中的<code>LRANGE key start top</code>来获取指定范围内的元素。而ZSet虽然没有角标，但是在ZSet中有排名，因此可以通过<code>ZRANGE key start top</code>来获取指定范围内的元素。那该如何选择呢？<br><strong>Feed流的分页问题</strong><br>Feed流的数据会不断更新，由于我们每次希望读取最新数据，从最新数据读取时，数据的角标也在变化，这会导致读取到重复的数据。因此不能采用传统的分页模式。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693032558202-4ad5f966-386f-4a2a-9a8c-eab6cf1a5650.png" alt="image.png"><br><strong>模拟按脚标查询，读取到了重复数据</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693033657267-f225d0df-8e4d-403e-9814-cf7dfb7b6645.png" alt="image.png"><br><strong>解决</strong><br>设置一个last记录上一次分页的位置<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693032639923-05a9de1a-6e4f-4be9-a2c2-e8d4a9e35928.png" alt="image.png"><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693034292553-7e626bf9-9dea-48f2-ac23-0ad924f02bcd.png" alt="image.png"><br><strong>总结</strong><br>List 只支持角标查询，一旦插入了新数据，角标就会发生变化，因此不支持滚动分页。<br>如果ZSet按照排名查询（角标），和List一样也不支持滚动分页。但是ZSet还支持按score值的范围进行查询，将score按从大到小进行排列，每次查询都记录最小时间戳，下次查询时找到比这个时间戳更小的，从而实现滚动分页。通过<code>ZRANGEBYSCORE key max min</code>实现</p><blockquote><p><strong>思考：</strong>通过<code>ZRANGEBYSCORE key max min</code>实现会出现什么问题？</p></blockquote><p>ZRANGEBYSCORE z1 1000 0 withscores limit 0 3，它表示在进行查询时从z1的set中查询从1000开始的第1条记录（包含）的三条数据<br>ZRANGEBYSCORE z1 6 0 withscores limit 1 3，它表示在进行查询时从z1的set中查询从6开始的第一条记录后（不包含）三条数据。因此如果多个用户分数相同，如果固定offset为1，它只会略过一条分数为6的记录，因此还是会出现重复问题。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693034488961-172f1c5b-088c-4f62-bf88-82d8dd9a4547.png" alt="image.png"><br>为了解决这个问题，除了需要记录上一次分页的最小值分数外，还需要记录有多少个最小值分数，并把它作为limit的offset参数。<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693035063466-211f526f-a26a-4cc4-a7ba-d3b432963f8f.png" alt="image.png"></p><h3 id="代码实现（Feed流-Sortedset滚动分页）"><a href="#代码实现（Feed流-Sortedset滚动分页）" class="headerlink" title="代码实现（Feed流+Sortedset滚动分页）"></a>代码实现（Feed流+Sortedset滚动分页）</h3><p><strong>改造代码，当用户保存Blog后，将Blog信息推送到粉丝的收件箱中</strong></p><pre><code class="java">@Overridepublic Result saveBlog(Blog blog) {    // 1.获取登录用户    UserDTO user = UserHolder.getUser();    blog.setUserId(user.getId());    // 2.保存探店笔记    boolean isSuccess = save(blog);    if(!isSuccess){        return Result.fail(&quot;新增笔记失败!&quot;);    }    // 3.查询笔记作者的所有粉丝 select * from tb_follow where follow_user_id = ?    List&lt;Follow&gt; follows = followService.query().eq(&quot;follow_user_id&quot;, user.getId()).list();    // 4.推送笔记id给所有粉丝    for (Follow follow : follows) {        // 4.1.获取粉丝id        Long userId = follow.getUserId();        // 4.2.推送        String key = FEED_KEY + userId;        stringRedisTemplate.opsForZSet().add(key, blog.getId().toString(), System.currentTimeMillis());    }    // 5.返回id    return Result.ok(blog.getId());}</code></pre><p><strong>从收件箱中分页查询推送Blog信息</strong></p><pre><code class="java">@Datapublic class ScrollResult {    private List&lt;?&gt; list;    private Long minTime;    private Integer offset;}</code></pre><pre><code class="java">@GetMapping(&quot;/of/follow&quot;)public Result queryBlogOfFollow(    @RequestParam(&quot;lastId&quot;) Long max, @RequestParam(value = &quot;offset&quot;, defaultValue = &quot;0&quot;) Integer offset){    return blogService.queryBlogOfFollow(max, offset);}</code></pre><pre><code class="java">@Overridepublic Result queryBlogOfFollow(Long max, Integer offset) {    // 1.获取当前用户    Long userId = UserHolder.getUser().getId();    // 2.查询收件箱 ZREVRANGEBYSCORE key Max Min LIMIT offset count    String key = FEED_KEY + userId;    Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; typedTuples = stringRedisTemplate.opsForZSet()        .reverseRangeByScoreWithScores(key, 0, max, offset, 2);    // 3.非空判断    if (typedTuples == null || typedTuples.isEmpty()) {        return Result.ok();    }    // 4.解析数据：blogId、minTime（时间戳）、offset    List&lt;Long&gt; ids = new ArrayList&lt;&gt;(typedTuples.size());    long minTime = 0; // 2    int os = 1; // 2    for (ZSetOperations.TypedTuple&lt;String&gt; tuple : typedTuples) { // 5 4 4 2 2        // 4.1.获取id        ids.add(Long.valueOf(tuple.getValue()));        // 4.2.获取分数(时间戳）        long time = tuple.getScore().longValue();        if(time == minTime){            os++;        }else{            minTime = time;            os = 1;        }    }  os = minTime == max ? os : os + offset;    // 5.根据id查询blog    String idStr = StrUtil.join(&quot;,&quot;, ids);    List&lt;Blog&gt; blogs = query().in(&quot;id&quot;, ids).last(&quot;ORDER BY FIELD(id,&quot; + idStr + &quot;)&quot;).list();    for (Blog blog : blogs) {        // 5.1.查询blog有关的用户        queryBlogUser(blog);        // 5.2.查询blog是否被点赞        isBlogLiked(blog);    }    // 6.封装并返回    ScrollResult r = new ScrollResult();    r.setList(blogs);    r.setOffset(os);    r.setMinTime(minTime);    return Result.ok(r);}</code></pre><h1 id="九、附近商户"><a href="#九、附近商户" class="headerlink" title="九、附近商户"></a>九、附近商户</h1><h2 id="GEO介绍"><a href="#GEO介绍" class="headerlink" title="GEO介绍"></a>GEO介绍</h2><p>GEO就是Geolocation的简写形式，代表地理坐标。Redis在3.2版本中加入了对GEO的支持，允许存储地理坐标信息，帮助我们根据经纬度来检索数据。常见的命令有：</p><ul><li>GEOADD：添加一个地理空间信息，包含：经度（longitude）、纬度（latitude）、值（member）</li><li>GEODIST：计算指定的两个点之间的距离并返回</li><li>GEOHASH：将指定member的坐标转为hash字符串形式并返回</li><li>GEOPOS：返回指定member的坐标</li><li>GEORADIUS：指定圆心、半径，找到该圆内包含的所有member，并按照与圆心之间的距离排序后返回。6.以后已废弃</li><li>GEOSEARCH：在指定范围内搜索member，并按照与指定点之间的距离排序后返回。范围可以是圆形或矩形。6.2.新功能</li><li>GEOSEARCHSTORE：与GEOSEARCH功能一致，不过可以把结果存储到一个指定的key。 6.2.新功能</li></ul><h2 id="业务介绍"><a href="#业务介绍" class="headerlink" title="业务介绍"></a>业务介绍</h2><p><strong>商户数据表</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693037910929-74790dad-3095-46c2-b240-86e034f9b477.png" alt="image.png"><br><strong>请求信息</strong><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693037828329-c15df876-cad3-468f-9158-42be7b22752d.png" alt="image.png"><br><strong>保存在Redis中的数据格式</strong><br>GEO底层是Zset数据结构，其中会把member作为value，把经纬度计算出一个值作为score存入到Redis的GEO中<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1693038180232-8329d958-a01c-4e8b-9c62-c6a923fb2f7d.png" alt="image.png"><br>由于在首页中，我们会点进去一个具体类型，在这个具体类型中查看距离由小到大排序的商铺信息。为了按照type来对数据进行筛选，因此使用类型作为key，商户id作为member，往GEO中存入信息。之后在进行查询时，就直接获取某一个类型对应的GEO数据即可。<br><strong>将商铺信息预热到Redis中</strong></p><pre><code class="java">@Testvoid loadShopData() {    // 1.查询店铺信息    List&lt;Shop&gt; list = shopService.list();    // 2.把店铺分组，按照typeId分组，typeId一致的放到一个集合    Map&lt;Long, List&lt;Shop&gt;&gt; map = list.stream().collect(Collectors.groupingBy(Shop::getTypeId));    // 3.分批完成写入Redis    for (Map.Entry&lt;Long, List&lt;Shop&gt;&gt; entry : map.entrySet()) {        // 3.1.获取类型id        Long typeId = entry.getKey();        String key = SHOP_GEO_KEY + typeId;        // 3.2.获取同类型的店铺的集合        List&lt;Shop&gt; value = entry.getValue();        List&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; locations = new ArrayList&lt;&gt;(value.size());        // 3.3.写入redis GEOADD key 经度 纬度 member        for (Shop shop : value) {            // stringRedisTemplate.opsForGeo().add(key, new Point(shop.getX(), shop.getY()), shop.getId().toString());            locations.add(new RedisGeoCommands.GeoLocation&lt;&gt;(                    shop.getId().toString(),                    new Point(shop.getX(), shop.getY())            ));        }        stringRedisTemplate.opsForGeo().add(key, locations);    }}</code></pre><pre><code class="java">@GetMapping(&quot;/of/type&quot;)public Result queryShopByType(        @RequestParam(&quot;typeId&quot;) Integer typeId,        @RequestParam(value = &quot;current&quot;, defaultValue = &quot;1&quot;) Integer current,        @RequestParam(value = &quot;x&quot;, required = false) Double x,        @RequestParam(value = &quot;y&quot;, required = false) Double y) {   return shopService.queryShopByType(typeId, current, x, y);}</code></pre><pre><code class="java">@Overridepublic Result queryShopByType(Integer typeId, Integer current, Double x, Double y) {    // 1.判断是否需要根据坐标查询    if (x == null || y == null) {        // 不需要坐标查询，按数据库查询        Page&lt;Shop&gt; page = query()                .eq(&quot;type_id&quot;, typeId)                .page(new Page&lt;&gt;(current, SystemConstants.DEFAULT_PAGE_SIZE));        // 返回数据        return Result.ok(page.getRecords());    }    // 2.计算分页参数    int from = (current - 1) * SystemConstants.DEFAULT_PAGE_SIZE;    int end = current * SystemConstants.DEFAULT_PAGE_SIZE;    // 3.查询redis、按照距离排序、分页。结果：shopId、distance    String key = SHOP_GEO_KEY + typeId;    GeoResults&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; results = stringRedisTemplate.opsForGeo() // GEOSEARCH key BYLONLAT x y BYRADIUS 10 WITHDISTANCE            .search(                    key,                    GeoReference.fromCoordinate(x, y),                    new Distance(5000),                    RedisGeoCommands.GeoSearchCommandArgs.newGeoSearchArgs().includeDistance().limit(end)            );    // 4.解析出id    if (results == null) {        return Result.ok(Collections.emptyList());    }    List&lt;GeoResult&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt;&gt; list = results.getContent();    if (list.size() &lt;= from) {        // 没有下一页了，结束        return Result.ok(Collections.emptyList());    }    // 4.1.截取 from ~ end的部分    List&lt;Long&gt; ids = new ArrayList&lt;&gt;(list.size());    Map&lt;String, Distance&gt; distanceMap = new HashMap&lt;&gt;(list.size());    list.stream().skip(from).forEach(result -&gt; {        // 4.2.获取店铺id        String shopIdStr = result.getContent().getName();        ids.add(Long.valueOf(shopIdStr));        // 4.3.获取距离        Distance distance = result.getDistance();        distanceMap.put(shopIdStr, distance);    });    // 5.根据id查询Shop    String idStr = StrUtil.join(&quot;,&quot;, ids);    List&lt;Shop&gt; shops = query().in(&quot;id&quot;, ids).last(&quot;ORDER BY FIELD(id,&quot; + idStr + &quot;)&quot;).list();    for (Shop shop : shops) {        shop.setDistance(distanceMap.get(shop.getId().toString()).getValue());    }    // 6.返回    return Result.ok(shops);}</code></pre>]]></content>
    
    <summary type="html">
    
      Redis缓存问题如何解决？秒杀场景下有哪些问题？如何实现一人一单？Redis的分布式锁应用？
    
    </summary>
    
      <category term="项目" scheme="https://xingxin-99.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="项目" scheme="https://xingxin-99.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Java</title>
    <link href="https://xingxin-99.github.io/2023/06/24/Java/"/>
    <id>https://xingxin-99.github.io/2023/06/24/Java/</id>
    <published>2023-06-24T14:06:19.000Z</published>
    <updated>2023-08-25T07:19:09.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://xingxin-99.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://xingxin-99.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis</title>
    <link href="https://xingxin-99.github.io/2023/05/25/Mybatis/"/>
    <id>https://xingxin-99.github.io/2023/05/25/Mybatis/</id>
    <published>2023-05-25T08:18:45.000Z</published>
    <updated>2023-08-26T10:54:11.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Mybatis概述"><a href="#一、Mybatis概述" class="headerlink" title="一、Mybatis概述"></a>一、Mybatis概述</h1><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1680487655144-40ceb047-3022-4026-bbf3-cda45164060f.jpeg" alt><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1680437065377-d99edf14-e83c-486a-88e0-9bdb41372a58.png" alt="image.png"></p><h1 id="二、Mybatis入门程序"><a href="#二、Mybatis入门程序" class="headerlink" title="二、Mybatis入门程序"></a>二、Mybatis入门程序</h1><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1680500855072-ee792ea4-2e94-4dc3-b7b8-5a44922f5a7f.jpeg" alt><br>maven中为什么放在resource目录下的资源，等于放在类的根路径下在 Maven 项目中，src/main/resources 目录下的资源文件会被打包进生成的 Jar 或 War 包中，并放在类路径的根目录下。这是因为 Maven 在构建项目时会把 src/main/resources 目录作为类路径的一部分，所以所有放在这个目录下的文件都会被打包进去。<br>在 Java 项目中，类路径指的是 JVM 用来搜索类和资源文件的路径。类路径的根目录是指能够直接被 JVM 搜索到的目录，这个目录下的文件都可以直接用 ClassLoader 加载。在 Maven 项目中，src/main/resources 目录中的文件就是放在这个根目录下的。<br>因此，如果我们把某个资源文件放在 src/main/resources 目录下，它就相当于放在了类路径的根目录下，可以直接通过 ClassLoader 加载，无需指定路径。这也是 Maven 中推荐的一种资源文件的组织方式，方便我们在项目中访问和使用这些文件。</p><pre><code class="java">public class mybatisTest {    public static void main(String[] args) {        SqlSession sqlSession=null;        try {            SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();            InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);            SqlSessionFactory sqlSessionFactory =  sqlSessionFactoryBuilder.build(is);            sqlSession  =sqlSessionFactory.openSession();            int count = sqlSession.insert(&quot;car_insert&quot;);            System.out.println(count);            sqlSession.commit();        } catch (IOException e) {            if(sqlSession!=null){                sqlSession.rollback();            }            throw new RuntimeException(e);        }finally {            if(sqlSession!=null){                sqlSession.close();            }        }    }}</code></pre><h2 id="Junit介绍"><a href="#Junit介绍" class="headerlink" title="Junit介绍"></a>Junit介绍</h2><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1680506335553-68c40a50-1f3c-4b52-ad95-a8a6ad5a19d3.jpeg" alt></p><pre><code class="java">public class MathService{    public int sum(int a, int b){        return a+b;    }}</code></pre><pre><code class="java">public class MathServiceTest{    MathService mathService = new MathService();    @Test    public void Testsum(){        int actual =  mathService.sum(1,2);        int expected = 3;        Assert.assertEquals(expected,actual);    }}</code></pre><h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1680506472504-c1acdd8c-c4b7-4411-aca6-655fb1f9153d.jpeg" alt></p><pre><code class="xml">&lt;settings&gt;  &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt;&lt;/settings&gt;</code></pre><h2 id="Mybatis工具类"><a href="#Mybatis工具类" class="headerlink" title="Mybatis工具类"></a>Mybatis工具类</h2><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1680508228437-3158357f-aeb1-4a2b-abd1-80e25eea0d32.jpeg" alt></p><pre><code class="java">public class mybatisUtil {    private mybatisUtil(){    }    private static SqlSessionFactory sqlSessionFactory;    static {        try {            SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();            sqlSessionFactory = sqlSessionFactoryBuilder.build(Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;));        } catch (IOException e) {            throw new RuntimeException(e);        }    }    public static SqlSession openSession(){        return sqlSessionFactory.openSession();    }}</code></pre><h1 id="三、使用Mybatis完成CRUD"><a href="#三、使用Mybatis完成CRUD" class="headerlink" title="三、使用Mybatis完成CRUD"></a>三、使用Mybatis完成CRUD</h1><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1680517974389-0d8347e0-c9a4-413b-a0f3-84d0c88aed54.jpeg" alt></p><pre><code class="xml">&lt;mapper namespace=&quot;com.star.mybatis&quot;&gt;  &lt;insert id=&quot;car_insert&quot;&gt;    insert into t_car(id,car_num,brand,guide_price,produce_time,car_type)    values (null,#{carNum},#{brand},#{guidePrice},#{produceTime},#{carType})  &lt;/insert&gt;  &lt;delete id=&quot;car_delete&quot;&gt;    delete from t_car where id=#{i}  &lt;/delete&gt;  &lt;select id=&quot;car_select&quot; resultType=&quot;com.star.mybatis.introduction.pojo.Car&quot;&gt;    select * from t_car where id=#{id}  &lt;/select&gt;  &lt;select id=&quot;car_selectall&quot; resultType=&quot;com.star.mybatis.introduction.pojo.Car&quot;&gt;    select * from t_car  &lt;/select&gt;&lt;/mapper&gt;</code></pre><pre><code class="java">public class mybatisTest {    @Test    public void deletetest(){        SqlSession sqlSession = mybatisUtil.openSession();        int count = sqlSession.delete(&quot;car_delete&quot;,6);        System.out.println(count);        sqlSession.commit();        sqlSession.close();    }    @Test    public void testInsert(){        Car car = new Car(null,&quot;001&quot;,&quot;长安&quot;,325.00,&quot;2023-04-03&quot;,&quot;燃油&quot;);        SqlSession sqlSession = mybatisUtil.openSession();        int count = sqlSession.insert(&quot;car_insert&quot;,car);        System.out.println(count);        sqlSession.commit();        sqlSession.close();    }    @Test    public void testSelect(){        SqlSession sqlSession = mybatisUtil.openSession();        Car car = sqlSession.selectOne(&quot;car_select&quot;,8);        System.out.println(car);    }    @Test    public void testSelectAll(){        SqlSession sqlSession = mybatisUtil.openSession();        List&lt;Car&gt; cars = sqlSession.selectList(&quot;car_selectall&quot;);        cars.forEach(car -&gt; System.out.println(car));    }}</code></pre><h1 id="四、Mybatis核心配置文件详解"><a href="#四、Mybatis核心配置文件详解" class="headerlink" title="四、Mybatis核心配置文件详解"></a>四、Mybatis核心配置文件详解</h1><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1680523257682-8a2d4943-5ab5-4994-8f0b-b8c3234c84ae.jpeg" alt><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1680522258950-c634a153-003f-4159-8076-ff0808bec404.png" alt="image.png"></p><h1 id="五、在WEB中应用Mybatis"><a href="#五、在WEB中应用Mybatis" class="headerlink" title="五、在WEB中应用Mybatis"></a>五、在WEB中应用Mybatis</h1><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1680612788721-fc4c90df-db3e-40a4-ab04-e8f0c7560300.jpeg" alt><br>方法作用域方法作用域是指变量、常量和对象在方法中的可见性和生命周期。在方法内部声明的变量和常量只在方法内部可见，当方法执行结束时，它们也随之消失。对象的作用域可以超出方法，例如一个方法返回一个对象，这个对象在方法外部也可以被使用，直到它被垃圾回收器回收。方法作用域的一个重要特点是，方法内部的变量名或参数名可以与类的成员变量名或参数名相同，但是方法内部的变量或参数会覆盖类的成员变量或参数，直到方法执行结束。<br>应用作用域应用作用域是指对象的生命周期与应用程序的生命周期相同，即在应用程序启动时创建，在应用程序关闭时销毁。在Spring框架中，应用作用域的对象通常使用单例模式创建。在应用作用域下创建的对象可以在整个应用程序中共享，因此在多个地方使用同一个对象可以提高程序的性能。例如，在Web应用程序中，可以在应用作用域下创建一个共享的数据源对象，以便多个线程共享这个对象，避免了频繁创建和销毁数据源对象的开销。<br>请求作用域请求作用域是指在一次 HTTP 请求的处理过程中所创建的对象的作用域。它的生命周期是从请求的开始到响应的结束。在一个 HTTP 请求中，通过 <strong>HttpServletRequest</strong> 对象可以获取请求作用域，可以将对象存放在请求作用域中，然后在整个请求处理过程中共享这些对象。通常情况下，请求作用域可以用于在不同的页面之间传递数据。<br>为什么SqlSessionFactory的作用域为应用作用域MyBatis中的<strong>SqlSessionFactory</strong>是一个重量级的对象，主要负责创建和管理<strong>SqlSession</strong>，其创建过程包含了加载配置文件、解析映射文件、创建数据库连接等操作，因此在创建<strong>SqlSessionFactory</strong>对象时会耗费较多的资源和时间。而且，一个<strong>SqlSessionFactory</strong>对象一般情况下只需要创建一次，并在应用生命周期内持续使用，因此将其作用域设置为应用作用域是比较合适的。<br>如果将<strong>SqlSessionFactory</strong>的作用域设置为方法或请求作用域，那么每次执行操作都需要重新创建和销毁<strong>SqlSessionFactory</strong>对象，会导致不必要的资源浪费和性能下降。而将其作用域设置为会话作用域也不太合适，因为<strong>SqlSessionFactory</strong>是线程安全的，多个线程可以共享同一个<strong>SqlSessionFactory</strong>对象，因此在会话作用域中可能会造成不必要的资源浪费和线程安全问题。<br>为什么SqlSession的作用域为请求作用域在使用 MyBatis 进行数据库操作时，每个 SqlSession 都代表了一次对数据库的操作会话。通常情况下，一个请求需要操作数据库多次，因此需要多次创建 SqlSession 对象。由于 SqlSession 是非线程安全的，每次创建一个 SqlSession 对象实例既需要时间又占用内存，所以为了更好地控制资源的开销，将 SqlSession 的作用域设置为请求作用域是比较合适的选择。<br>将 SqlSession 的作用域设置为请求作用域可以保证每个请求都能获取到一个独立的 SqlSession 实例，避免了线程安全问题和并发访问的冲突。同时，由于每个 SqlSession 对象实例只存在于请求过程中，不会长时间占用内存，能够有效地避免内存泄露的问题，提升了应用程序的稳定性和性能。</p><h1 id="六、使用javassist生成类"><a href="#六、使用javassist生成类" class="headerlink" title="六、使用javassist生成类"></a>六、使用javassist生成类</h1><h1 id="七、MyBatis中接口代理机制及使用"><a href="#七、MyBatis中接口代理机制及使用" class="headerlink" title="七、MyBatis中接口代理机制及使用"></a>七、MyBatis中接口代理机制及使用</h1><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1680779380963-dd2fa5fd-6722-4740-87a9-5e51f9ac3d37.jpeg" alt></p><h1 id="八、Mybatis的小技巧"><a href="#八、Mybatis的小技巧" class="headerlink" title="八、Mybatis的小技巧"></a>八、Mybatis的小技巧</h1><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1680852662243-4d469fdc-96b1-48be-9108-4dccb512a3bd.jpeg" alt></p><h1 id="九、Mybatis参数处理"><a href="#九、Mybatis参数处理" class="headerlink" title="九、Mybatis参数处理"></a>九、Mybatis参数处理</h1><h1 id="十、Mybatis查询语句专题"><a href="#十、Mybatis查询语句专题" class="headerlink" title="十、Mybatis查询语句专题"></a>十、Mybatis查询语句专题</h1><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1681024141004-771be03d-37b8-4b01-bd6f-af9f435b370f.jpeg" alt></p><h1 id="十一、动态SQL"><a href="#十一、动态SQL" class="headerlink" title="十一、动态SQL"></a>十一、动态SQL</h1><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1681115128363-72f3157f-9b9d-43e8-a88d-593267156068.jpeg" alt></p><h1 id="十一、Mybatis高级映射及延迟加载"><a href="#十一、Mybatis高级映射及延迟加载" class="headerlink" title="十一、Mybatis高级映射及延迟加载"></a>十一、Mybatis高级映射及延迟加载</h1><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1681130838712-10994ee4-d61e-4114-b77d-47f42a16195f.jpeg" alt></p><h1 id="十二、Mybatis缓存"><a href="#十二、Mybatis缓存" class="headerlink" title="十二、Mybatis缓存"></a>十二、Mybatis缓存</h1><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1681197006556-164a5e9b-2298-4ee5-8507-0dae4f5f7172.png" alt="image.png"><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1681197647797-ccea69f2-0e10-48e0-98fe-2327e47f459f.png" alt="image.png"></p><h1 id="十三、Mybatis逆向工程"><a href="#十三、Mybatis逆向工程" class="headerlink" title="十三、Mybatis逆向工程"></a>十三、Mybatis逆向工程</h1><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1681214819064-04b2f22b-a4e2-443d-9e99-ef4a701de267.jpeg" alt></p><h1 id="十四、Mybatis分页插件"><a href="#十四、Mybatis分页插件" class="headerlink" title="十四、Mybatis分页插件"></a>十四、Mybatis分页插件</h1><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1681216603928-190603d7-c9f4-45a9-a951-fe3428581d4f.jpeg" alt><br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1681215434369-8709d737-e76d-47f5-9ebd-2bc8635bbce5.png" alt="image.png"></p><h1 id="十五、Mybatis注解式开发"><a href="#十五、Mybatis注解式开发" class="headerlink" title="十五、Mybatis注解式开发"></a>十五、Mybatis注解式开发</h1><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/img/1681217449018-8d6562c0-2059-4762-bdd9-34ad6bd16d9e.jpeg" alt></p><h1 id="十六、Mybatis面试问题"><a href="#十六、Mybatis面试问题" class="headerlink" title="十六、Mybatis面试问题"></a>十六、Mybatis面试问题</h1><p>Mybatis中的动态SQLMybatis中的动态SQL是指可以根据实际情况生成不同SQL语句的一种特殊语法。通常情况下，动态SQL是用来构建复杂的SQL语句的，例如根据不同条件拼接where语句、根据传入的参数构建不同的查询条件等。Mybatis中提供了一些内置的动态SQL语句，例如if、choose、when、otherwise等，可以根据需要自由组合使用，从而构建出灵活多变的SQL语句。同时，Mybatis也支持使用OGNL表达式来处理动态SQL，可以实现更加灵活的条件组合。掌握动态SQL的使用，可以帮助开发者更加方便地构建出灵活、高效的数据访问逻辑，提升应用的性能和扩展性。<br>Mybatis中的一对多映射在 Mybatis 中，一对多映射是指一个实体类中包含一个集合属性，该集合属性中包含多个与另一个实体类的对应关系，即一个实体类与另一个实体类是一对多的关系。例如，一个班级实体类包含多个学生实体类，那么班级实体类就是一的一方，学生实体类就是多的一方。<br>在 Mybatis 中实现一对多映射，需要使用 Mybatis 提供的 association 和 collection 标签。association 标签用于定义单个对象之间的关系，而 collection 标签则用于定义集合对象之间的关系。<br>具体来说，在映射文件中，需要先定义一的一方的查询语句，并使用 association 标签将多的一方的查询结果映射到一的一方中。然后，再定义多的一方的查询语句，并使用 collection 标签将多的一方的查询结果映射到一的一方的集合属性中。<br>Mybatis中#{}和${}的区别在Mybatis中，#{}和${}都是用来表示参数占位符的，但是它们的作用是不同的。</p><p>#{}用于表示一个占位符，Mybatis会将传入的参数自动进行类型转换，然后将转换后的值安全地插入到SQL语句中。这种方式可以有效地防止SQL注入的风险。<br>${}也用于表示一个占位符，但是它不会对传入的参数进行处理，直接将传入的字符串嵌入到SQL语句中。这种方式存在SQL注入的风险，应该尽量避免使用。<br>因此，建议在Mybatis中使用#{}作为参数占位符，以确保系统的安全性。<br>使用 #{} 时，Mybatis 会将 SQL 语句中的 #{} 替换成一个 ? 占位符，并使用 PreparedStatement 来执行 SQL 语句，这样就可以避免 SQL 注入等安全问题。同时，使用 #{} 还可以自动进行类型转换。</p>]]></content>
    
    <summary type="html">
    
      Mybatis介绍及基础使用
    
    </summary>
    
      <category term="Spring" scheme="https://xingxin-99.github.io/categories/Spring/"/>
    
    
      <category term="Mybatis" scheme="https://xingxin-99.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Redis双写一致性</title>
    <link href="https://xingxin-99.github.io/2023/05/24/Redis%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    <id>https://xingxin-99.github.io/2023/05/24/Redis双写一致性/</id>
    <published>2023-05-24T12:24:16.000Z</published>
    <updated>2023-08-25T07:15:20.198Z</updated>
    
    <content type="html"><![CDATA[<p>双写一致性是为了保证数据库和缓存中的数据最终一致。</p><blockquote><p>删除缓存还是更新缓存？</p></blockquote><ol><li>写多读少场景下浪费性能<br>如果采用更新缓存方式的话，那么每对数据库更新一次，就会更新一次缓存。在写多读少的场景下，如果进行了多次更新，但没有一次读取，那中间更新多次缓存的这个过程是没必要的且浪费性能的，因为我们希望读缓存时读的是相对最新的数据。因此目前大多采用类似于懒加载的这种模式，删除缓存后，不使用时不读缓存，只有使用时再去数据库中读取最新的数据。</li><li>脏数据问题<br>线程1和线程2都要对数据库中的A数据进行写操作。线程1先执行，在写入数据库要更新缓存之前，线程2来对A进行更新并写入缓存，然后线程1再写入缓存。这导致缓存中是A更新后的数据而不是期望的B更新后的数据，导致最后缓存中出现了脏数据。<blockquote><p>先更新数据库还是先删除缓存？</p></blockquote></li></ol><blockquote><p>使用延时双删，为什么要删除两次？为什么第一次要删除？为什么要进行延时？</p></blockquote><p>延时的目的：</p><ol><li>线程B读取数据库，在还未更新缓存时，线程A更新数据库，删除缓存。线程B把读到的数据写入到缓存中，写入的是脏数据。进行延时，等到线程B将脏数据写入到缓存后在进行删除，降低了出现数据不一致性的可能。</li><li>主从同步，需要等待从库等待数据更新后再删除缓存，否则读取的还是从库中未更新的数据。<blockquote><p>如何判断Reidis中的key删除失败？</p></blockquote></li></ol><ul><li>Redis的DEL命令用于删除已存在的键，返回值是删除键的数量</li><li><p>redisTemplate.delete(key)，如果删除失败，返回false</p><blockquote><p>如果延时双删，最后的删失败了怎么办？</p></blockquote></li><li><p>失败重试机制</p><ul><li>同步重试</li><li>异步重试<ul><li>使用消息队列</li></ul></li></ul></li><li>订阅binlog日志</li></ul><p>使用canal组件订阅binlog日志，当发现binlog中有更新数据的日志时，删除相应的缓存。</p><ul><li>定时任务<br>将需要重试的数据写入到重试表中，重试表中有重试次数及数据状态，定时任务每隔一定时间读取重试表中的数据进行重试，如果成功，则将该数据删除，如果不成功则重试次数+1，如果重试次数达到指定值还未更新成功，则重试表中将该记录更新为失败状态。同时考虑是不是由于Redis宕机而导致了更新一直失败，考虑使用Redis集群来提高Redis服务的高可用性。<blockquote><p>如何保证缓存与数据库的强一致性？</p></blockquote></li></ul><p>如果要保证Redis与数据库的强一致性，可以靠考虑使用Redis的互斥锁实现。当要更新数据时，对要更新的key加上互斥锁，同时开启另一个线程对数据库执行写操作。当写操作执行完毕后释放锁。</p><blockquote><p>如何不要求强一致性，可以怎么做？</p></blockquote><ol><li>延时双删</li><li>Canal组件</li></ol>]]></content>
    
    <summary type="html">
    
      Redis和数据库中的数据如何保持一致？
    
    </summary>
    
      <category term="Redis" scheme="https://xingxin-99.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://xingxin-99.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Typora+PicGo+阿里云OSS上传图片</title>
    <link href="https://xingxin-99.github.io/2022/05/25/1/"/>
    <id>https://xingxin-99.github.io/2022/05/25/1/</id>
    <published>2022-05-25T12:24:16.000Z</published>
    <updated>2023-08-25T07:19:07.822Z</updated>
    
    <content type="html"><![CDATA[<h3 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h3><ol><li><p>登陆进阿里云OSS<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824132825596.png" alt="image-20230824132825596"></p></li><li><p>创建OSS Bucket<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824133158324.png" alt="image-20230824133158324"></p><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824133521869.png" alt="image-20230824133521869"><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824133559834.png" alt></p></li><li><p>获取AccessKey<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824133831946.png" alt="image-20230824133831946"></p><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824134040069.png" alt="image-20230824134040069"></p><p>保存AccessKey ID与Secret，后面PicGo图床设置会使用到</p><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824134139206.png" alt="image-20230824134139206"></p></li></ol><h3 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h3><ol><li>下载PicGo：<br><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">Releases · Molunerfinn/PicGo (github.com)</a></li><li>选择显示图床<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824130630861.png" alt="image-20230824130630861"></li><li>图床设置<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824130854740.png" alt="image-20230824130854740"></li><li>验证图片是否能够上传成功<br><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824131104158.png" alt="image-20230824131104158"></li></ol><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><p><strong>Typora上传图片设置：文件-&gt;偏好设置-&gt;图像</strong></p><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824131927896.png" alt="image-20230824131927896"></p>]]></content>
    
    <summary type="html">
    
      Typora+PicGo+阿里云OSS上传图片
    
    </summary>
    
      <category term="技术" scheme="https://xingxin-99.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="https://xingxin-99.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>主题配置</title>
    <link href="https://xingxin-99.github.io/2022/04/25/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>https://xingxin-99.github.io/2022/04/25/主题配置/</id>
    <published>2022-04-25T02:37:16.000Z</published>
    <updated>2023-08-25T07:15:09.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改对话"><a href="#修改对话" class="headerlink" title="修改对话"></a>修改对话</h2><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230825104420164.png" alt="1"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;修改对话&quot;&gt;&lt;a href=&quot;#修改对话&quot; class=&quot;headerlink&quot; title=&quot;修改对话&quot;&gt;&lt;/a&gt;修改对话&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://starstar-blog.oss-cn-chengdu.aliyuncs.com/im
      
    
    </summary>
    
      <category term="技术" scheme="https://xingxin-99.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建博客时遇到的问题</title>
    <link href="https://xingxin-99.github.io/2022/03/24/%E6%90%AD%E5%BB%BABlog%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://xingxin-99.github.io/2022/03/24/搭建Blog时遇到的问题/</id>
    <published>2022-03-24T12:24:16.000Z</published>
    <updated>2023-08-25T07:15:14.986Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>问题：执行hexo d后报错ssh: connect to host github.com port 22: Connection refused，文件不能部署到Github中</p></blockquote><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824140639251.png" alt="image-20230824140639251"></p><p><strong>解决：换一个端口号</strong></p><ol><li><p>进入.ssh目录，编辑配置文件config</p><pre><code class="shell">cd ~/.sshvim config</code></pre><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824141033199.png" alt="image-20230824141033199"></p></li><li><p>编辑文件内容</p><pre><code>Host github.comUser gitHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443Host gitlab.comHostname altssh.gitlab.comUser gitPort 443PreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa</code></pre><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824141349564.png" alt="image-20230824141349564"></p></li><li><p>保存退出，检查是否成功</p><pre><code>ssh -T git@github.com</code></pre><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824142340533.png" alt="image-20230824142340533"></p></li><li><p>验证hexo d能否成功部署资源到Github，结果成功</p><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824142027146.png" alt="image-20230824142027146"></p><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230824141848200.png" alt="image-20230824141848200"></p></li></ol><p>参考：<a href="https://blog.csdn.net/weixin_45637036/article/details/106560217" target="_blank" rel="noopener">Git问题</a></p><blockquote><p>在分类下添加标签，没有显示创建出分类下的页面</p></blockquote><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/QQ%E5%9B%BE%E7%89%8720230825140212.png" alt="QQ图片20230825140212"></p><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/QQ%E5%9B%BE%E7%89%8720230825140218.png" alt="QQ图片20230825140218"></p><p>解决：</p><p>先生成md文件，在md里添加分类，它会根据这个来生成html页面</p><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230825140708123.png" alt="image-20230825140708123"></p><p>创建成功后，再添加至配置文件中</p><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230825140759883.png" alt="image-20230825140759883"></p><p>hexo g 生成页面会发现页面已经成功生成</p><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230825140932659.png" alt="image-20230825140932659"></p><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230825141238221.png" alt="image-20230825141238221"></p><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230825141328422.png" alt="image-20230825141328422"></p><blockquote><p>如何修改新的分类下的背景图片？</p></blockquote><p><img src="https://starstar-blog.oss-cn-chengdu.aliyuncs.com/image-20230825142155668.png" alt="image-20230825142155668"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;问题：执行hexo d后报错ssh: connect to host github.com port 22: Connection refused，文件不能部署到Github中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http
      
    
    </summary>
    
      <category term="技术" scheme="https://xingxin-99.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
</feed>
